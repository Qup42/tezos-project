{-
    Michelson (L)BNF Grammar to be used with the BNF Converter https://github.com/BNFC/bnfc
    Grammar based on: https://tezos.gitlab.io/alpha/michelson.html#full-grammar
-}


-- RULES
comment "#" ; -- line comment
comment "/*" "*/" ; -- block comment

entrypoints Prog ;
_.        Prog ::= Prog ";" ; -- allow the ";" in "... code {...};"
_.        Prog ::= "{" Prog "}" ;
Contract. Prog ::= "parameter" Typ ";" "storage" Typ ";" "code" "{" [Instr] "}" ; -- full contract
contract2. Prog ::= "storage" Typ ";" "parameter" Typ ";" "code" "{" [Instr] "}" ;
define contract2 t0 t1 instrs = Contract t1 t0 instrs ;
--Code.     Prog ::= [Instr] ;  -- pure input of (a list of) instructions
Argument. Prog ::= Data ; -- for input / storage arguments

-- User-Defined regex-based token types
position token Str '"' ( (char - ["\"\\"]) | ('\\' ["\"\\rntb"]) )* '"' ; -- should be equivalent to (\" | \r | \n | \t | \b | \\ | [^"\])*
position token Bt {"0x"} ( digit | ["abcdefABCDEF"] )* ;
position token Neg '-' (digit+) ;  -- negative natural numbers. Neg is handled as string in the parser, unlike Integer!
--position token Integer digit+ ; -- TODO: currently interger does not contain position information
position token TypeAnnotation ':' (('_' | letter | digit) (["_.%@"] | letter | digit)* )? ; -- letter also accepts other chars then a-zA-Z, which it actually should not
position token VariableAnnotation '@' ( '%' | {"%%"} | ('_' | letter | digit) (["_.%@"] | letter | digit)* )? ;
position token FieldAnnotation '%' ( '@' | ('_' | letter | digit) (["_.%@"] | letter | digit)* )? ;

-- Data
separator Data ";" ;
_.               Data         ::= "(" Data ")" ; -- https://tezos.gitlab.io/alpha/michelson.html#format-of-patterns
DNeg.            Data         ::= Neg ; -- negative natural numbers
DNat.            Data         ::= Integer ;  -- Integer is the same as digit+ -> natural number, not acutally an integer
DStr.            Data         ::= Str ;
DBytes.          Data         ::= Bt ;
DUnit.           Data         ::= "Unit" ;
DTrue.           Data         ::= "True" ;
DFalse.          Data         ::= "False" ;
DPair.           Data         ::= "Pair" Data [PairSeq] ; -- should acctually have ( ) brackets arround. In practice these are not always there
-- TODO: causes problems with PrintMichelson/TestMichelson: brackets are missing in output. Maybe that can be solved with define ...?
DLeft.           Data         ::= "Left" Data ; -- should acctually have ( ) brackets arround. In practice these are not always there
DRight.          Data         ::= "Right" Data ; -- should acctually have ( ) brackets arround. In practice these are not always there
DSome.           Data         ::= "Some" Data ; -- should acctually have ( ) brackets arround. In practice these are not always there
DNone.           Data         ::= "None" ;
DBlock.          Data         ::= "{" [Data] "}" ;  -- list or set or block of instructions (lambda typ), but also Pairs
DMap.            Data         ::= "{" [MapSeq] "}" ;
DInstruction.    Data         ::= Instr ;  -- used in DBlock's [Data] for lambda typ TODO: instead use { [Instr] } ?
terminator nonempty PairSeq "" ;
DPairSeq. PairSeq ::= Data ;
separator MapSeq ";" ;
DMapSeq. MapSeq ::= "Elt" Data Data ;


-- Instructions
separator Instr ";" ; -- empty instruction sequence allowed! Last 'Instr' does does not >need< to be terminated with ';'!
--TA.                    Instr ::= Instr TypeAnnotation ;
--VA.                    Instr ::= Instr VariableAnnotation ;
ANNOT.                 Instr ::= Instr Annotation ; -- trailing annotations
_.                     Instr ::= "{" Instr "}" ;
_.                     Instr ::= "{" Instr ";" "}" ; -- the defined separator does not seem to work here, therefore ";" is needed as another case
internal BLOCK.        Instr ::= "{" [Instr] "}" ; -- used for macro expansion
DROP.                  Instr ::= "DROP" ;
DROP_N.                Instr ::= "DROP" Integer ;
DUP.                   Instr ::= "DUP" ;
DUP_N.                 Instr ::= "DUP" Integer ;
SWAP.                  Instr ::= "SWAP" ;
DIG_N.                 Instr ::= "DIG" Integer ;
DUG_N.                 Instr ::= "DUG" Integer ;
PUSH.                  Instr ::= "PUSH" Typ Data ;
SOME.                  Instr ::= "SOME" ;
NONE.                  Instr ::= "NONE" Typ ;
UNIT.                  Instr ::= "UNIT" ;
NEVER.                 Instr ::= "NEVER" ;
IF_NONE.               Instr ::= "IF_NONE" "{" [Instr] "}" "{" [Instr] "}" ;
PAIR.                  Instr ::= "PAIR" ;
PAIR_N.                Instr ::= "PAIR" Integer ;
CAR.                   Instr ::= "CAR" ;
CDR.                   Instr ::= "CDR" ;
UNPAIR.                Instr ::= "UNPAIR" ;
UNPAIR_N.              Instr ::= "UNPAIR" Integer ;
LEFT.                  Instr ::= "LEFT" Typ ;
RIGHT.                 Instr ::= "RIGHT" Typ ;
IF_LEFT.               Instr ::= "IF_LEFT" "{" [Instr] "}" "{" [Instr] "}" ;
NIL.                   Instr ::= "NIL" Typ ;
CONS.                  Instr ::= "CONS" ;
IF_CONS.               Instr ::= "IF_CONS" "{" [Instr] "}" "{" [Instr] "}" ;
SIZE.                  Instr ::= "SIZE" ;
EMPTY_SET.             Instr ::= "EMPTY_SET" CTyp ;
EMPTY_MAP.             Instr ::= "EMPTY_MAP" CTyp Typ ;
EMPTY_BIG_MAP.         Instr ::= "EMPTY_BIG_MAP" CTyp Typ ;
MAP.                   Instr ::= "MAP" "{" [Instr] "}" ;
ITER.                  Instr ::= "ITER" "{" [Instr] "}" ;
MEM.                   Instr ::= "MEM" ;
GET.                   Instr ::= "GET" ;
GET_N.                 Instr ::= "GET" Integer ;
UPDATE.                Instr ::= "UPDATE" ;
UPDATE_N.              Instr ::= "UPDATE" Integer ;
GET_AND_UPDATE.        Instr ::= "GET_AND_UPDATE" ;
IF.                    Instr ::= "IF" "{" [Instr] "}" "{" [Instr] "}" ;
LOOP.                  Instr ::= "LOOP" "{" [Instr] "}" ;
LOOP_LEFT.             Instr ::= "LOOP_LEFT" "{" [Instr] "}" ;
LAMBDA.                Instr ::= "LAMBDA" Typ Typ "{" [Instr] "}" ;
EXEC.                  Instr ::= "EXEC" ;
APPLY.                 Instr ::= "APPLY" ;
DIP.                   Instr ::= "DIP" "{" [Instr] "}" ;
DIP_N.                 Instr ::= "DIP" Integer "{" [Instr] "}" ;
FAILWITH.              Instr ::= "FAILWITH" ;
CAST.                  Instr ::= "CAST" ; -- TODO: https://tezos.gitlab.io/alpha/michelson.html#type-annotations
RENAME.                Instr ::= "RENAME" ;
CONCAT.                Instr ::= "CONCAT" ;
SLICE.                 Instr ::= "SLICE" ;
PACK.                  Instr ::= "PACK" ;
UNPACK.                Instr ::= "UNPACK" Typ ;
ADD.                   Instr ::= "ADD" ;
SUB.                   Instr ::= "SUB" ;
MUL.                   Instr ::= "MUL" ;
EDIV.                  Instr ::= "EDIV" ;
ABS.                   Instr ::= "ABS" ;
SNAT.                  Instr ::= "ISNAT" ;
INT.                   Instr ::= "INT" ;
NEG.                   Instr ::= "NEG" ;
LSL.                   Instr ::= "LSL" ;
LSR.                   Instr ::= "LSR" ;
OR.                    Instr ::= "OR" ;
AND.                   Instr ::= "AND" ;
XOR.                   Instr ::= "XOR" ;
NOT.                   Instr ::= "NOT" ;
COMPARE.               Instr ::= "COMPARE" ;
EQ.                    Instr ::= "EQ" ;
NEQ.                   Instr ::= "NEQ" ;
LT.                    Instr ::= "LT" ;
GT.                    Instr ::= "GT" ;
LE.                    Instr ::= "LE" ;
GE.                    Instr ::= "GE" ;
SELF.                  Instr ::= "SELF" ;
SELF_ADDRESS.          Instr ::= "SELF_ADDRESS" ;
CONTRACT.              Instr ::= "CONTRACT" Typ ;
TRANSFER_TOKENS.       Instr ::= "TRANSFER_TOKENS" ;
SET_DELEGATE.          Instr ::= "SET_DELEGATE" ;
CREATE_CONTRACT.       Instr ::= "CREATE_CONTRACT" "{" "parameter" Typ ";" "storage" Typ ";" "code" "{" [Instr] "}" "}" ;
cREATE_CONTRACT2.      Instr ::= "CREATE_CONTRACT" "{" "storage" Typ ";" "parameter" Typ ";" "code" "{" [Instr] "}" "}" ;
define cREATE_CONTRACT2 t0 t1 instrs = CREATE_CONTRACT t1 t0 instrs ;
IMPLICIT_ACCOUNT.      Instr ::= "IMPLICIT_ACCOUNT" ;
VOTING_POWER.          Instr ::= "VOTING_POWER" ;
NOW.                   Instr ::= "NOW" ;
LEVEL.                 Instr ::= "LEVEL" ;
AMOUNT.                Instr ::= "AMOUNT" ;
BALANCE.               Instr ::= "BALANCE" ;
CHECK_SIGNATURE.       Instr ::= "CHECK_SIGNATURE" ;
BLAKE2B.               Instr ::= "BLAKE2B" ;
KECCAK.                Instr ::= "KECCAK" ;
SHA3.                  Instr ::= "SHA3" ;
SHA256.                Instr ::= "SHA256" ;
SHA512.                Instr ::= "SHA512" ;
HASH_KEY.              Instr ::= "HASH_KEY" ;
SOURCE.                Instr ::= "SOURCE" ;
SENDER.                Instr ::= "SENDER" ;
ADDRESS.               Instr ::= "ADDRESS" ;
CHAIN_ID.              Instr ::= "CHAIN_ID" ;
TOTAL_VOTING_POWER.    Instr ::= "TOTAL_VOTING_POWER" ;
PAIRING_CHECK.         Instr ::= "PAIRING_CHECK" ;
SAPLING_EMPTY_STATE.   Instr ::= "SAPLING_EMPTY_STATE" Integer ; -- TODO: https://gitlab.com/morley-framework/morley/-/issues/380  SAPPLING to be removed?
SAPLING_VERIFY_UPDATE. Instr ::= "SAPLING_VERIFY_UPDATE" ;
TICKET.                Instr ::= "TICKET" ;
READ_TICKET.           Instr ::= "READ_TICKET" ;
SPLIT_TICKET.          Instr ::= "SPLIT_TICKET" ;
JOIN_TICKETS.          Instr ::= "JOIN_TICKETS" ;
OPEN_CHEST.            Instr ::= "OPEN_CHEST" ;

-- MACRO INSTRUCTIONS
-- Fail
d_FAIL.     Instr ::= "FAIL" ;
define d_FAIL = BLOCK[UNIT, FAILWITH] ;
-- Compare
d_CMPEQ.    Instr ::= "CMPEQ" ;
d_CMPNEQ.   Instr ::= "CMPNEQ" ;
d_CMPLT.    Instr ::= "CMPLT" ;
d_CMPGT.    Instr ::= "CMPGT" ;
d_CMPLE.    Instr ::= "CMPLE" ;
d_CMPGE.    Instr ::= "CMPGE" ;
d_IFEQ.     Instr ::= "IFEQ" "{" [Instr] "}" "{" [Instr] "}" ;
d_IFNEQ.    Instr ::= "IFNEQ" "{" [Instr] "}" "{" [Instr] "}" ;
d_IFLT.     Instr ::= "IFLT" "{" [Instr] "}" "{" [Instr] "}" ;
d_IFGT.     Instr ::= "IFGT" "{" [Instr] "}" "{" [Instr] "}" ;
d_IFLE.     Instr ::= "IFLE" "{" [Instr] "}" "{" [Instr] "}" ;
d_IFGE.     Instr ::= "IFGE" "{" [Instr] "}" "{" [Instr] "}" ;
d_IFCMPEQ.  Instr ::= "IFCMPEQ" "{" [Instr] "}" "{" [Instr] "}" ;
d_IFCMPNEQ. Instr ::= "IFCMPNEQ" "{" [Instr] "}" "{" [Instr] "}" ;
d_IFCMPLT.  Instr ::= "IFCMPLT" "{" [Instr] "}" "{" [Instr] "}" ;
d_IFCMPGT.  Instr ::= "IFCMPGT" "{" [Instr] "}" "{" [Instr] "}" ;
d_IFCMPLE.  Instr ::= "IFCMPLE" "{" [Instr] "}" "{" [Instr] "}" ;
d_IFCMPGE.  Instr ::= "IFCMPGE" "{" [Instr] "}" "{" [Instr] "}" ;
define d_CMPEQ          = BLOCK[COMPARE, EQ] ;
define d_CMPNEQ         = BLOCK[COMPARE, NEQ] ;
define d_CMPLT          = BLOCK[COMPARE, LT] ;
define d_CMPGT          = BLOCK[COMPARE, GT] ;
define d_CMPLE          = BLOCK[COMPARE, LE] ;
define d_CMPGE          = BLOCK[COMPARE, GE] ;
define d_IFEQ bt bf     = BLOCK[EQ, (IF bt bf)] ;
define d_IFNEQ bt bf    = BLOCK[NEQ, (IF bt bf)] ;
define d_IFLT bt bf     = BLOCK[LT, (IF bt bf)] ;
define d_IFGT bt bf     = BLOCK[GT, (IF bt bf)] ;
define d_IFLE bt bf     = BLOCK[LE, (IF bt bf)] ;
define d_IFGE bt bf     = BLOCK[GE, (IF bt bf)] ;
define d_IFCMPEQ bt bf  = BLOCK[d_CMPEQ, (IF bt bf)] ;
define d_IFCMPNEQ bt bf = BLOCK[d_CMPNEQ, (IF bt bf)] ;
define d_IFCMPLT bt bf  = BLOCK[d_CMPLT, (IF bt bf)] ;
define d_IFCMPGT bt bf  = BLOCK[d_CMPGT, (IF bt bf)] ;
define d_IFCMPLE bt bf  = BLOCK[d_CMPLE, (IF bt bf)] ;
define d_IFCMPGE bt bf  = BLOCK[d_CMPGE, (IF bt bf)] ;
-- Assertions
d_ASSERT.        Instr ::= "ASSERT" ;
d_ASSERT_EQ.     Instr ::= "ASSERT_EQ" ;
d_ASSERT_NEQ.    Instr ::= "ASSERT_NEQ" ;
d_ASSERT_LT.     Instr ::= "ASSERT_LT" ;
d_ASSERT_GT.     Instr ::= "ASSERT_GT" ;
d_ASSERT_LE.     Instr ::= "ASSERT_LE" ;
d_ASSERT_GE.     Instr ::= "ASSERT_GE" ;
d_ASSERT_CMPEQ.  Instr ::= "ASSERT_CMPEQ" ;
d_ASSERT_CMPNEQ. Instr ::= "ASSERT_CMPNEQ" ;
d_ASSERT_CMPLT.  Instr ::= "ASSERT_CMPLT" ;
d_ASSERT_CMPGT.  Instr ::= "ASSERT_CMPGT" ;
d_ASSERT_CMPLE.  Instr ::= "ASSERT_CMPLE" ;
d_ASSERT_CMPGE.  Instr ::= "ASSERT_CMPGE" ;
d_ASSERT_NONE.   Instr ::= "ASSERT_NONE" ;
d_ASSERT_SOME.   Instr ::= "ASSERT_SOME" [Annotation] ;
d_ASSERT_LEFT.   Instr ::= "ASSERT_LEFT" [Annotation] ;
d_ASSERT_RIGHT.  Instr ::= "ASSERT_RIGHT" [Annotation] ;
define d_ASSERT        = (IF [] [d_FAIL]) ;
define d_ASSERT_EQ     = (d_IFEQ [] [d_FAIL]) ;
define d_ASSERT_NEQ    = (d_IFNEQ [] [d_FAIL]) ;
define d_ASSERT_LT     = (d_IFLT [] [d_FAIL]) ;
define d_ASSERT_GT     = (d_IFGT [] [d_FAIL]) ;
define d_ASSERT_LE     = (d_IFLE [] [d_FAIL]) ;
define d_ASSERT_GE     = (d_IFGE [] [d_FAIL]) ;
define d_ASSERT_CMPEQ  = (d_IFCMPEQ [] [d_FAIL]) ;
define d_ASSERT_CMPNEQ = (d_IFCMPNEQ [] [d_FAIL]) ;
define d_ASSERT_CMPLT  = (d_IFCMPLT [] [d_FAIL]) ;
define d_ASSERT_CMPGT  = (d_IFCMPGT [] [d_FAIL]) ;
define d_ASSERT_CMPLE  = (d_IFCMPLE [] [d_FAIL]) ;
define d_ASSERT_CMPGE  = (d_IFCMPGE [] [d_FAIL]) ;
define d_ASSERT_NONE   = (IF_NONE [] [d_FAIL]) ;
define d_ASSERT_SOME annots  = (IF_NONE [d_FAIL] [RENAME]) ; -- discarded annotations
define d_ASSERT_LEFT annots  = (IF_LEFT [RENAME] [d_FAIL]) ; -- discarded annotations
define d_ASSERT_RIGHT annots = (IF_LEFT [d_FAIL] [RENAME]) ; -- discarded annotations
-- Syntactic Conveniences
-- P(\left=A|P(\left)(\right))(\right=I|P(\left)(\right))R
-- UNP(\left=A|P(\left)(\right))(\right=I|P(\left)(\right))R
-- C[AD]+R
-- m_CAR_K.
-- m_CDR_K.
d_IF_SOME.  Instr ::= "IF_SOME" "{" [Instr] "}" "{" [Instr] "}" ;
define d_IF_SOME bt bf = IF_NONE bf bt ;
d_IF_RIGHT. Instr ::= "IF_RIGHT" "{" [Instr] "}" "{" [Instr] "}" ;
define d_IF_RIGHT bt bf = IF_LEFT bf bt ;
-- m_SET_CAR.
-- m_SET_CDR.
-- SET_C[AD]+R
m_MAP_CAR. Instr ::= "MAP_CAR" [Annotation] "{" [Instr] "}" ;
define m_MAP_CAR annots code = BLOCK[DUP, CDR, (DIP [CAR, BLOCK(code)]), SWAP, PAIR] ; -- discarded annotations
m_MAP_CDR. Instr ::= "MAP_CDR" [Annotation] "{" [Instr] "}" ;
define m_MAP_CDR annots code = BLOCK[DUP, CDR, BLOCK(code), SWAP, CAR, PAIR] ; -- discarded annotations
-- MAP_C[AD]+R



-- Annotations
terminator Annotation "" ; -- Annotations and macros
ATypeA.     Annotation ::= TypeAnnotation ;
AVariableA. Annotation ::= VariableAnnotation ;
AFieldA.    Annotation ::= FieldAnnotation ;

-- Syntax
-- Special annotations

-- Views

-- Entrypoints


-- Types
_.                    Typ ::= "(" Typ ")" ;
TCtype.               Typ ::= CTyp ;
--TTA1.                 Typ ::= TypeAnnotation Typ ; -- matches "INSTR :t Typ"
--TTA2.                 Typ ::= Typ TypeAnnotation ; -- matches "Typ :t"
--TVA1.                 Typ ::= VariableAnnotation Typ ; -- matches "INSTR @v Typ" (and recursively "INSTR @v @v Typ" and so on)
--TFA2.                 Typ ::= Typ FieldAnnotation ; -- matches "Typ :t"
TAnnot1.              Typ ::= Typ Annotation ;
TAnnot2.              Typ ::= Annotation Typ ;
TOperation.           Typ ::= "operation" ;
TContract.            Typ ::= "contract" Typ ;
TOption.              Typ ::= "option" Typ ;
TList.                Typ ::= "list" Typ ;
TSet.                 Typ ::= "set" CTyp ;
TTicket.              Typ ::= "ticket" CTyp ;
TPair.                Typ ::= "(" "pair" Typ [TypeSeq] ")";
TOr.                  Typ ::= "or" Typ Typ ;
TLambda.              Typ ::= "lambda" Typ Typ ;
TMap.                 Typ ::= "map" CTyp Typ ;
TBig_map.             Typ ::= "big_map" CTyp Typ ;
TBls_381_g1.          Typ ::= "bls12_381_g1" ;
TBls_381_g2.          Typ ::= "bls12_381_g2" ;
TBls_381_fr.          Typ ::= "bls12_381_fr" ;
TSapling_transaction. Typ ::= "sapling_transaction" Integer ;
TSapling_state.       Typ ::= "sapling_state" Integer ;
TChest.               Typ ::= "chest" ;
TChest_key.           Typ ::= "chest_key" ;
terminator nonempty TypeSeq "" ;
TypeSeq0. TypeSeq ::= Typ ;
--TTypSeq1.             TypeSeq  ::= Typ Typ ;
--TTypSeq2.             TypeSeq  ::= Typ TypeSeq ;

-- Comparable Types
_.          CTyp ::= "(" CTyp ")" ;
CAnnot1.    CTyp ::= CTyp Annotation ;
CAnnot2.    CTyp ::= Annotation CTyp ;
CUnit.      CTyp ::= "unit" ;
CNever.     CTyp ::= "never" ;
CBool.      CTyp ::= "bool" ;
CInt.       CTyp ::= "int" ;
CNat.       CTyp ::= "nat" ;
CString.    CTyp ::= "string" ;
CChain_id.  CTyp ::= "chain_id" ;
CBytes.     CTyp ::= "bytes" ;
CMutez.     CTyp ::= "mutez" ;
CKey_hash.  CTyp ::= "key_hash" ;
CKey.       CTyp ::= "key" ;
CSignature. CTyp ::= "signature" ;
CTimestamp. CTyp ::= "timestamp" ;
CAddress.   CTyp ::= "address" ;
COption.    CTyp ::= "option" CTyp ;
COr.        CTyp ::= "or" CTyp CTyp ;
CPair.      CTyp ::= "(" "pair" CTyp [CTypeSeq] ")" ;
terminator nonempty CTypeSeq "" ;
CTypeSeq0. CTypeSeq ::= CTyp ;
--CTypSeq1.   CTypeSeq ::= CTyp CTyp ;
--CTypSeq2.   CTypeSeq ::= CTyp CTypeSeq ;
