# Michelson Grammar as defined on https://tezos.gitlab.io/alpha/michelson.html.
# This is not complete!

<data> ::=
  | <int constant>
  | <string constant>
  | <byte sequence constant>
  | Unit
  | True
  | False
  | Pair <data> <data> ...
  | Left <data>
  | Right <data>
  | Some <data>
  | None
  | { <data> ; ... }
  | { Elt <data> <data> ; ... }
  | instruction
<natural number constant> ::=
  | [0-9]+
<int constant> ::=
  | <natural number constant>
  | -<natural number constant>
<string constant> ::=
  | "<string content>*"
<string content> ::=
  | \"
  | \r
  | \n
  | \t
  | \b
  | \\
  | [^"\]
<byte sequence constant> ::=
  | 0x[0-9a-fA-F]+
<instruction> ::=
  | { <instruction> ... }
  | DROP
  | DROP <natural number constant>
  | DUP
  | DUP <natural number constant>
  | SWAP
  | DIG <natural number constant>
  | DUG <natural number constant>
  | PUSH <type> <data>
  | SOME
  | NONE <type>
  | UNIT
  | NEVER
  | IF_NONE { <instruction> ... } { <instruction> ... }
  | PAIR
  | PAIR <natural number constant>
  | CAR
  | CDR
  | UNPAIR
  | UNPAIR <natural number constant>
  | LEFT <type>
  | RIGHT <type>
  | IF_LEFT { <instruction> ... } { <instruction> ... }
  | NIL <type>
  | CONS
  | IF_CONS { <instruction> ... } { <instruction> ... }
  | SIZE
  | EMPTY_SET <comparable type>
  | EMPTY_MAP <comparable type> <type>
  | EMPTY_BIG_MAP <comparable type> <type>
  | MAP { <instruction> ... }
  | ITER { <instruction> ... }
  | MEM
  | GET
  | GET <natural number constant>
  | UPDATE
  | UPDATE <natural number constant>
  | IF { <instruction> ... } { <instruction> ... }
  | LOOP { <instruction> ... }
  | LOOP_LEFT { <instruction> ... }
  | LAMBDA <type> <type> { <instruction> ... }
  | EXEC
  | APPLY
  | DIP { <instruction> ... }
  | DIP <natural number constant> { <instruction> ... }
  | FAILWITH
  | CAST
  | RENAME
  | CONCAT
  | SLICE
  | PACK
  | UNPACK <type>
  | ADD
  | SUB
  | MUL
  | EDIV
  | ABS
  | ISNAT
  | INT
  | NEG
  | LSL
  | LSR
  | OR
  | AND
  | XOR
  | NOT
  | COMPARE
  | EQ
  | NEQ
  | LT
  | GT
  | LE
  | GE
  | SELF
  | SELF_ADDRESS
  | CONTRACT <type>
  | TRANSFER_TOKENS
  | SET_DELEGATE
  | CREATE_CONTRACT { <instruction> ... }
  | IMPLICIT_ACCOUNT
  | VOTING_POWER
  | NOW
  | LEVEL
  | AMOUNT
  | BALANCE
  | CHECK_SIGNATURE
  | BLAKE2B
  | KECCAK
  | SHA3
  | SHA256
  | SHA512
  | HASH_KEY
  | SOURCE
  | SENDER
  | ADDRESS
  | CHAIN_ID
  | TOTAL_VOTING_POWER
  | PAIRING_CHECK
  | SAPLING_EMPTY_STATE <natural number constant>
  | SAPLING_VERIFY_UPDATE
  | TICKET
  | READ_TICKET
  | SPLIT_TICKET
  | JOIN_TICKETS
  | OPEN_CHEST
<type> ::=
  | <comparable type>
  | option <type>
  | list <type>
  | set <comparable type>
  | operation
  | contract <type>
  | ticket <comparable type>
  | pair <type> <type> ...
  | or <type> <type>
  | lambda <type> <type>
  | map <comparable type> <type>
  | big_map <comparable type> <type>
  | bls12_381_g1
  | bls12_381_g2
  | bls12_381_fr
  | sapling_transaction <natural number constant>
  | sapling_state <natural number constant>
  | chest
  | chest_key
<comparable type> ::=
  | unit
  | never
  | bool
  | int
  | nat
  | string
  | chain_id
  | bytes
  | mutez
  | key_hash
  | key
  | signature
  | timestamp
  | address
  | option <comparable type>
  | or <comparable type> <comparable type>
  | pair <comparable type> <comparable type> ...