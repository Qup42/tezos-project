{-# OPTIONS_GHC -w #-}
{-# OPTIONS -XMagicHash -XBangPatterns -XTypeSynonymInstances -XFlexibleInstances -cpp #-}
#if __GLASGOW_HASKELL__ >= 710
{-# OPTIONS_GHC -XPartialTypeSignatures #-}
#endif
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module Michelson.Par
  ( happyError
  , myLexer
  , pProg
  ) where

import Prelude

import qualified Michelson.Abs
import Michelson.Lex
import qualified Data.Array as Happy_Data_Array
import qualified Data.Bits as Bits
import qualified GHC.Exts as Happy_GHC_Exts
import Control.Applicative(Applicative(..))
import Control.Monad (ap)

-- parser produced by Happy Version 1.19.11

newtype HappyAbsSyn  = HappyAbsSyn HappyAny
#if __GLASGOW_HASKELL__ >= 607
type HappyAny = Happy_GHC_Exts.Any
#else
type HappyAny = forall a . a
#endif
newtype HappyWrap4 = HappyWrap4 (Michelson.Abs.Int)
happyIn4 :: (Michelson.Abs.Int) -> (HappyAbsSyn )
happyIn4 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap4 x)
{-# INLINE happyIn4 #-}
happyOut4 :: (HappyAbsSyn ) -> HappyWrap4
happyOut4 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut4 #-}
newtype HappyWrap5 = HappyWrap5 (Michelson.Abs.Nat)
happyIn5 :: (Michelson.Abs.Nat) -> (HappyAbsSyn )
happyIn5 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap5 x)
{-# INLINE happyIn5 #-}
happyOut5 :: (HappyAbsSyn ) -> HappyWrap5
happyOut5 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut5 #-}
newtype HappyWrap6 = HappyWrap6 (Michelson.Abs.Str)
happyIn6 :: (Michelson.Abs.Str) -> (HappyAbsSyn )
happyIn6 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap6 x)
{-# INLINE happyIn6 #-}
happyOut6 :: (HappyAbsSyn ) -> HappyWrap6
happyOut6 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut6 #-}
newtype HappyWrap7 = HappyWrap7 (Michelson.Abs.Hex)
happyIn7 :: (Michelson.Abs.Hex) -> (HappyAbsSyn )
happyIn7 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap7 x)
{-# INLINE happyIn7 #-}
happyOut7 :: (HappyAbsSyn ) -> HappyWrap7
happyOut7 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut7 #-}
newtype HappyWrap8 = HappyWrap8 (Michelson.Abs.Prog)
happyIn8 :: (Michelson.Abs.Prog) -> (HappyAbsSyn )
happyIn8 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap8 x)
{-# INLINE happyIn8 #-}
happyOut8 :: (HappyAbsSyn ) -> HappyWrap8
happyOut8 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut8 #-}
newtype HappyWrap9 = HappyWrap9 ([Michelson.Abs.Data])
happyIn9 :: ([Michelson.Abs.Data]) -> (HappyAbsSyn )
happyIn9 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap9 x)
{-# INLINE happyIn9 #-}
happyOut9 :: (HappyAbsSyn ) -> HappyWrap9
happyOut9 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut9 #-}
newtype HappyWrap10 = HappyWrap10 (Michelson.Abs.PairSeq)
happyIn10 :: (Michelson.Abs.PairSeq) -> (HappyAbsSyn )
happyIn10 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap10 x)
{-# INLINE happyIn10 #-}
happyOut10 :: (HappyAbsSyn ) -> HappyWrap10
happyOut10 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut10 #-}
newtype HappyWrap11 = HappyWrap11 (Michelson.Abs.MapSeq)
happyIn11 :: (Michelson.Abs.MapSeq) -> (HappyAbsSyn )
happyIn11 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap11 x)
{-# INLINE happyIn11 #-}
happyOut11 :: (HappyAbsSyn ) -> HappyWrap11
happyOut11 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut11 #-}
newtype HappyWrap12 = HappyWrap12 (Michelson.Abs.Data)
happyIn12 :: (Michelson.Abs.Data) -> (HappyAbsSyn )
happyIn12 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap12 x)
{-# INLINE happyIn12 #-}
happyOut12 :: (HappyAbsSyn ) -> HappyWrap12
happyOut12 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut12 #-}
newtype HappyWrap13 = HappyWrap13 ([Michelson.Abs.Instr])
happyIn13 :: ([Michelson.Abs.Instr]) -> (HappyAbsSyn )
happyIn13 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap13 x)
{-# INLINE happyIn13 #-}
happyOut13 :: (HappyAbsSyn ) -> HappyWrap13
happyOut13 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut13 #-}
newtype HappyWrap14 = HappyWrap14 (Michelson.Abs.Instr)
happyIn14 :: (Michelson.Abs.Instr) -> (HappyAbsSyn )
happyIn14 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap14 x)
{-# INLINE happyIn14 #-}
happyOut14 :: (HappyAbsSyn ) -> HappyWrap14
happyOut14 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut14 #-}
newtype HappyWrap15 = HappyWrap15 (Michelson.Abs.TypeSeq)
happyIn15 :: (Michelson.Abs.TypeSeq) -> (HappyAbsSyn )
happyIn15 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap15 x)
{-# INLINE happyIn15 #-}
happyOut15 :: (HappyAbsSyn ) -> HappyWrap15
happyOut15 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut15 #-}
newtype HappyWrap16 = HappyWrap16 (Michelson.Abs.Typ)
happyIn16 :: (Michelson.Abs.Typ) -> (HappyAbsSyn )
happyIn16 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap16 x)
{-# INLINE happyIn16 #-}
happyOut16 :: (HappyAbsSyn ) -> HappyWrap16
happyOut16 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut16 #-}
newtype HappyWrap17 = HappyWrap17 (Michelson.Abs.CTypeSeq)
happyIn17 :: (Michelson.Abs.CTypeSeq) -> (HappyAbsSyn )
happyIn17 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap17 x)
{-# INLINE happyIn17 #-}
happyOut17 :: (HappyAbsSyn ) -> HappyWrap17
happyOut17 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut17 #-}
newtype HappyWrap18 = HappyWrap18 (Michelson.Abs.CTyp)
happyIn18 :: (Michelson.Abs.CTyp) -> (HappyAbsSyn )
happyIn18 x = Happy_GHC_Exts.unsafeCoerce# (HappyWrap18 x)
{-# INLINE happyIn18 #-}
happyOut18 :: (HappyAbsSyn ) -> HappyWrap18
happyOut18 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut18 #-}
happyInTok :: (Token) -> (HappyAbsSyn )
happyInTok x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyInTok #-}
happyOutTok :: (HappyAbsSyn ) -> (Token)
happyOutTok x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOutTok #-}


happyExpList :: HappyAddr
happyExpList = HappyA# "\x00\x00\xf8\xff\xff\xff\xfa\xff\xff\xfb\xdf\xef\xfe\xff\xdd\x1b\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfe\xff\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc2\x71\xdc\xb1\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x1c\xc7\x1d\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc2\x71\xdc\xb1\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfe\xff\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfe\xff\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\xff\xff\xff\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfe\xff\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfe\xff\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\xff\xff\xff\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfe\xff\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf8\xff\xff\xff\xfa\xff\xff\xfb\xdf\xef\xfe\xff\xdd\x1b\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc2\x71\xdc\xb1\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\xff\xff\xff\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\xff\xff\xff\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfe\xff\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x1c\xc7\x1d\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfe\xff\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\xff\xff\xff\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfe\xff\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x1c\xc7\x1d\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc2\x71\xdc\xb1\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf8\xff\xff\xff\xfe\xff\xff\xff\xff\xff\xff\xff\xff\x1f\x00\x00\x00\xa0\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf8\xff\xff\xff\xfa\xff\xff\xfb\xdf\xef\xfe\xff\xdd\x1b\x00\x00\x00\x20\x00\x00\x80\xff\xff\xff\xaf\xff\xff\xbf\xff\xfd\xee\xff\xdf\xbd\x01\x00\x00\x00\x02\x00\x00\xf8\xff\xff\xff\xfa\xff\xff\xfb\xdf\xef\xfe\xff\xdd\x1b\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\xff\xff\xff\x1f\x00\x00\x80\xff\xff\xff\xaf\xff\xff\xbf\xff\xfd\xee\xff\xdf\xbd\x01\x00\x00\x00\x02\x00\x00\xf8\xff\xff\xff\xfa\xff\xff\xfb\xdf\xef\xfe\xff\xdd\x1b\x00\x00\x00\x20\x00\x00\x80\xff\xff\xff\xaf\xff\xff\xbf\xff\xfd\xee\xff\xdf\xbd\x01\x00\x00\x00\x02\x00\x00\xf8\xff\xff\xff\xfa\xff\xff\xfb\xdf\xef\xfe\xff\xdd\x1b\x00\x00\x00\x20\x00\x00\x80\xff\xff\xff\xaf\xff\xff\xbf\xff\xfd\xee\xff\xdf\xbd\x01\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x1c\xc7\x1d\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc2\x71\xdc\xb1\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x1c\xc7\x1d\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfe\xff\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\xff\xff\xff\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x80\xff\xff\xff\xaf\xff\xff\xbf\xff\xfd\xee\xff\xdf\xbd\x01\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\xff\xff\xff\xaf\xff\xff\xbf\xff\xfd\xee\xff\xdf\xbd\x01\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\xff\xff\xff\xaf\xff\xff\xbf\xff\xfd\xee\xff\xdf\xbd\x01\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x80\xff\xff\xff\xaf\xff\xff\xbf\xff\xfd\xee\xff\xdf\xbd\x01\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc2\x71\xdc\xb1\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x1c\xc7\x1d\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\xff\xff\xff\xef\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x00\x00\x00\x6a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\xff\xff\xff\xef\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x00\x00\x00\x6a\x00\x00\xf8\xff\xff\xff\xfe\xff\xff\xff\xff\xff\xff\xff\xff\x1f\x00\x00\x00\xa0\x06\x00\x80\xff\xff\xff\xef\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x00\x00\x00\x6a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf8\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1f\x00\x00\x00\xa0\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\xff\xff\xff\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\xff\xff\xff\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\xff\xff\xff\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\xff\xff\xff\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\xff\xff\xff\x1f\x00\x00\x80\xff\xff\xff\xaf\xff\xff\xbf\xff\xfd\xee\xff\xdf\xbd\x01\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\xff\xff\xff\xef\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x00\x00\x00\x6a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\xff\xff\xff\xef\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x00\x00\x00\x6a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\xff\xff\xff\xaf\xff\xff\xbf\xff\xfd\xee\xff\xdf\xbd\x01\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\xff\xff\xff\xaf\xff\xff\xbf\xff\xfd\xee\xff\xdf\xbd\x01\x00\x00\x00\x02\x00\x00\xf8\xff\xff\xff\xfa\xff\xff\xfb\xdf\xef\xfe\xff\xdd\x1b\x00\x00\x00\x20\x00\x00\x80\xff\xff\xff\xaf\xff\xff\xbf\xff\xfd\xee\xff\xdf\xbd\x01\x00\x00\x00\x02\x00\x00\xf8\xff\xff\xff\xfa\xff\xff\xfb\xdf\xef\xfe\xff\xdd\x1b\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf8\xff\xff\xff\xfe\xff\xff\xff\xff\xff\xff\xff\xff\x1f\x00\x00\x00\xa0\x06\x00\x80\xff\xff\xff\xef\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x00\x00\x00\x6a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"#

{-# NOINLINE happyExpListPerState #-}
happyExpListPerState st =
    token_strs_expected
  where token_strs = ["error","%dummy","%start_pProg","Int","Nat","Str","Hex","Prog","ListData","PairSeq","MapSeq","Data","ListInstr","Instr","TypeSeq","Typ","CTypeSeq","CTyp","';'","'ABS'","'ADD'","'ADDRESS'","'AMOUNT'","'AND'","'APPLY'","'BALANCE'","'BLAKE2B'","'CAR'","'CAST'","'CDR'","'CHAIN_ID'","'CHECK_SIGNATURE'","'COMPARE'","'CONCAT'","'CONS'","'CONTRACT'","'CREATE_CONTRACT'","'DIG'","'DIP'","'DROP'","'DUG'","'DUP'","'EDIV'","'EMPTY_BIG_MAP'","'EMPTY_MAP'","'EMPTY_SET'","'EQ'","'EXEC'","'Elt'","'FAILWITH'","'False'","'GE'","'GET'","'GT'","'HASH_KEY'","'IF'","'IF_CONS'","'IF_LEFT'","'IF_NONE'","'IMPLICIT_ACCOUNT'","'INT'","'ISNAT'","'ITER'","'JOIN_TICKETS'","'KECCAK'","'LAMBDA'","'LE'","'LEFT'","'LEVEL'","'LOOP'","'LOOP_LEFT'","'LSL'","'LSR'","'LT'","'Left'","'MAP'","'MEM'","'MUL'","'NEG'","'NEQ'","'NEVER'","'NIL'","'NONE'","'NOT'","'NOW'","'None'","'OPEN_CHEST'","'OR'","'PACK'","'PAIR'","'PAIRING_CHECK'","'PUSH'","'Pair'","'READ_TICKET'","'RENAME'","'RIGHT'","'Right'","'SAPLING_EMPTY_STATE'","'SAPLING_VERIFY_UPDATE'","'SELF'","'SELF_ADDRESS'","'SENDER'","'SET_DELEGATE'","'SHA256'","'SHA3'","'SHA512'","'SIZE'","'SLICE'","'SOME'","'SOURCE'","'SPLIT_TICKET'","'SUB'","'SWAP'","'Some'","'TICKET'","'TOTAL_VOTING_POWER'","'TRANSFER_TOKENS'","'True'","'UNIT'","'UNPACK'","'UNPAIR'","'UPDATE'","'Unit'","'VOTING_POWER'","'XOR'","'address'","'big_map'","'bls12_381_fr'","'bls12_381_g1'","'bls12_381_g2'","'bool'","'bytes'","'chain_id'","'chest'","'chest_key'","'contract'","'int'","'key'","'key_hash'","'lambda'","'list'","'map'","'mutez'","'nat'","'never'","'operation'","'option'","'or'","'pair'","'sapling_state'","'sapling_transaction'","'set'","'signature'","'string'","'ticket'","'timestamp'","'unit'","'{'","'}'","L_Int","L_Nat","L_Str","L_Hex","%eof"]
        bit_start = st * 164
        bit_end = (st + 1) * 164
        read_bit = readArrayBit happyExpList
        bits = map read_bit [bit_start..bit_end - 1]
        bits_indexed = zip bits [0..163]
        token_strs_expected = concatMap f bits_indexed
        f (False, _) = []
        f (True, nr) = [token_strs !! nr]

happyActOffsets :: HappyAddr
happyActOffsets = HappyA# "\xd4\x02\x73\xff\x00\x00\x8e\xff\xca\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf5\x02\x04\x00\x47\x00\x89\x00\x47\x00\x47\x00\x47\x00\x00\x00\x8f\x00\x8f\x00\x8f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x47\x00\x00\x00\x00\x00\x51\x00\x55\x00\x66\x00\x6a\x00\x00\x00\x00\x00\x00\x00\x73\x00\x00\x00\x00\x00\xf5\x02\x00\x00\xf5\x02\x00\x00\x7e\x00\x83\x00\x00\x00\x00\x00\x00\x00\x90\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf5\x02\xf5\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xcd\x00\x00\x00\xf5\x02\x00\x00\x00\x00\xf5\x02\xcd\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf5\x02\xcd\x00\xcd\x00\x00\x00\x00\x00\xd4\x02\xda\x00\x6d\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x8f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf5\x02\x00\x00\x00\x00\x00\x00\xf5\x02\xf5\x02\x8f\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf5\x02\xf5\x02\xf5\x02\xe3\x00\xe3\x00\x8f\x00\x00\x00\x00\x00\x8f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x44\x02\x00\x00\x00\x00\x00\x00\xd4\x02\xd4\x02\xd4\x02\x00\x00\xf5\x02\xd4\x02\xd4\x02\xd4\x02\xd4\x02\xd4\x02\x00\x00\x00\x00\x8f\x00\x8f\x00\x8f\x00\xf5\x02\xf5\x02\x00\x00\x00\x00\x00\x00\xfb\x00\xd4\x02\x00\x00\xd4\x02\x00\x00\x23\x01\x00\x00\xf6\x00\xff\x00\xd4\x02\x00\x00\x00\x00\x00\x00\x8f\x00\x8f\x00\x00\x00\x03\x01\x0e\x01\x1a\x01\x27\x01\x94\x01\xa6\x01\xb2\x01\xb6\x01\xd6\x01\x00\x00\x00\x00\x00\x00\x00\x00\xc8\x02\x00\x00\x44\x02\x00\x00\x44\x02\x44\x02\x44\x02\x00\x00\x00\x00\xb4\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf5\x02\x8f\x00\xf5\x02\x8f\x00\x00\x00\x01\x00\xf5\x02\x00\x00\xf5\x02\x00\x00\xf5\x02\x92\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x8f\x00\x00\x00\xf5\x02\x28\x02\x41\x02\xd2\x02\xf2\x02\x44\x02\x00\x00\x00\x00\x00\x00\x44\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd4\x02\x00\x00\x25\x02\x69\x02\x81\x02\x8c\x02\x92\x02\x00\x00\x00\x00\x00\x00\xd4\x02\xd4\x02\xd4\x02\xd4\x02\x96\x02\x00\x00\x44\x02\x44\x02\x44\x02\x00\x00\x00\x00\x00\x00\x33\x03\x00\x00\xab\x02\xc1\x02\xcc\x02\xfe\x02\x00\x00\x00\x00\x00\x00\x00\x00\x1e\x03\x00\x00\x00\x00"#

happyGotoOffsets :: HappyAddr
happyGotoOffsets = HappyA# "\xfa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa5\x00\x00\x00\x8b\x03\x8c\x03\x8d\x03\x8e\x03\x8f\x03\x00\x00\x83\x03\x84\x03\x85\x03\x00\x00\x00\x00\x00\x00\x00\x00\x93\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf7\x00\x00\x00\xfd\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x01\x36\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x94\x03\x00\x00\x87\x01\x00\x00\x00\x00\x9c\x01\x95\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa0\x01\x96\x03\x97\x03\x00\x00\x00\x00\x0a\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x90\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa4\x01\x00\x00\x00\x00\x00\x00\xa5\x01\x1d\x02\x91\x03\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x02\x2e\x02\x15\x01\x98\x03\x99\x03\x92\x03\x00\x00\x00\x00\x9a\x03\x00\x00\x00\x00\x00\x00\x00\x00\x24\x02\x00\x00\x00\x00\x00\x00\x34\x02\x37\x03\x39\x03\x00\x00\xad\x02\x3b\x03\x3d\x03\x3f\x03\x41\x03\x43\x03\x00\x00\x00\x00\x9b\x03\x9c\x03\x42\x03\xb5\x02\xb6\x02\x00\x00\x00\x00\x00\x00\x00\x00\x48\x03\x00\x00\x4a\x03\x00\x00\x4c\x03\x00\x00\x00\x00\x00\x00\x4e\x03\x00\x00\x00\x00\x00\x00\x4d\x03\x9d\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2d\x02\x00\x00\x9a\x01\x31\x02\xb0\x02\x00\x00\x00\x00\x8f\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x93\x01\x4d\x03\xba\x02\x9d\x03\x00\x00\x00\x00\xbe\x02\x00\x00\xbf\x02\x00\x00\xc3\x02\x53\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x51\x03\x00\x00\x93\x01\x00\x00\x00\x00\x00\x00\x00\x00\xb4\x02\x00\x00\x00\x00\x00\x00\xa3\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x78\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7a\x03\x7c\x03\x7e\x03\x80\x03\x00\x00\x00\x00\xa3\x01\xbd\x02\x20\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x9e\x03\x00\x00\x00\x00"#

happyAdjustOffset :: Happy_GHC_Exts.Int# -> Happy_GHC_Exts.Int#
happyAdjustOffset off = off

happyDefActions :: HappyAddr
happyDefActions = HappyA# "\x00\x00\x00\x00\xfe\xff\x00\x00\x00\x00\xa9\xff\xad\xff\x83\xff\x8e\xff\xa2\xff\xb7\xff\x8d\xff\x8b\xff\xd1\xff\xb3\xff\xd0\xff\x82\xff\x8c\xff\x9f\xff\xb1\xff\xc9\xff\x00\x00\x00\x00\x00\x00\x00\x00\xe0\xff\x00\x00\xde\xff\xaa\xff\x00\x00\x00\x00\x00\x00\x9e\xff\xb8\xff\xb4\xff\x99\xff\xc0\xff\x9b\xff\x86\xff\x00\x00\x00\x00\x00\x00\x00\x00\x92\xff\xa7\xff\xa8\xff\x00\x00\x7a\xff\x8a\xff\x00\x00\x9a\xff\x00\x00\x8f\xff\x00\x00\x00\x00\xa5\xff\xa4\xff\x9c\xff\x00\x00\xc1\xff\xab\xff\xa6\xff\x9d\xff\xd5\xff\x00\x00\x00\x00\xa0\xff\x90\xff\x79\xff\xa3\xff\xaf\xff\xd3\xff\x80\xff\x00\x00\x7c\xff\xb2\xff\x00\x00\x00\x00\x7e\xff\x98\xff\x97\xff\x84\xff\x94\xff\x88\xff\x89\xff\x87\xff\xc7\xff\xb0\xff\xd8\xff\x85\xff\x7b\xff\xac\xff\xdc\xff\x7d\xff\x81\xff\x95\xff\xd6\xff\x00\x00\xcf\xff\xbe\xff\x91\xff\xa1\xff\xe5\xff\x00\x00\xe4\xff\xbd\xff\xfd\xff\xce\xff\xae\xff\x76\xff\x54\xff\x00\x00\x68\xff\x6a\xff\x69\xff\x5f\xff\x5a\xff\x5b\xff\x65\xff\x64\xff\x00\x00\x5e\xff\x57\xff\x58\xff\x00\x00\x00\x00\x00\x00\x59\xff\x5d\xff\x60\xff\x72\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x56\xff\x5c\xff\x00\x00\x55\xff\x61\xff\x7f\xff\xcc\xff\x00\x00\xd2\xff\xd7\xff\xca\xff\xe5\xff\xe5\xff\xe5\xff\xcd\xff\x00\x00\xe5\xff\xe5\xff\xe5\xff\xe5\xff\xe5\xff\xbf\xff\xc6\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdd\xff\xda\xff\xdf\xff\x00\x00\xe5\xff\xdb\xff\xe5\xff\x96\xff\xe2\xff\xfa\xff\x00\x00\x00\x00\xe5\xff\xc4\xff\xc5\xff\x51\xff\x00\x00\x00\x00\x53\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf3\xff\xf2\xff\xf1\xff\xd9\xff\xe6\xff\xee\xff\x00\x00\xe9\xff\x00\x00\x00\x00\x00\x00\xef\xff\xf0\xff\xe5\xff\xfc\xff\xfb\xff\x70\xff\x73\xff\x67\xff\x66\xff\x6f\xff\x00\x00\x76\xff\x00\x00\x76\xff\x75\xff\x53\xff\x00\x00\x74\xff\x00\x00\x71\xff\x00\x00\xe2\xff\xe1\xff\xe3\xff\x6b\xff\x6d\xff\x6c\xff\x52\xff\x6e\xff\x62\xff\x63\xff\x77\xff\x78\xff\x00\x00\x00\x00\x00\x00\xe4\xff\x00\x00\xea\xff\xeb\xff\xed\xff\x00\x00\xec\xff\xe2\xff\xc3\xff\xba\xff\xbb\xff\xe5\xff\xc2\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb6\xff\x93\xff\xb5\xff\xe5\xff\xe5\xff\xe5\xff\xe5\xff\x00\x00\xf6\xff\xf7\xff\x00\x00\xf9\xff\xe7\xff\xe8\xff\xf8\xff\x00\x00\xb9\xff\x00\x00\x00\x00\x00\x00\x00\x00\xbc\xff\xc8\xff\xcb\xff\xd4\xff\xf5\xff\xf4\xff"#

happyCheck :: HappyAddr
happyCheck = HappyA# "\xff\xff\x8e\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x92\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00\x48\x00\x49\x00\x4a\x00\x4b\x00\x4c\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\x51\x00\x52\x00\x53\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x66\x00\x67\x00\x68\x00\x69\x00\x6a\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x72\x00\x73\x00\x74\x00\x75\x00\x76\x00\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\x84\x00\x85\x00\x86\x00\x87\x00\x88\x00\x89\x00\x8a\x00\x8b\x00\x8c\x00\x8d\x00\x8e\x00\x8c\x00\x90\x00\x91\x00\x92\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x0c\x00\x20\x00\x0e\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x01\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x42\x00\x43\x00\x8f\x00\x45\x00\x46\x00\x47\x00\x48\x00\x49\x00\x4a\x00\x8c\x00\x4c\x00\x4d\x00\x4e\x00\x8c\x00\x50\x00\x51\x00\x52\x00\x53\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x8c\x00\x61\x00\x62\x00\x63\x00\x8c\x00\x65\x00\x66\x00\x67\x00\x68\x00\x6c\x00\x6a\x00\x6b\x00\x04\x00\x8c\x00\x71\x00\x72\x00\x73\x00\x0c\x00\x0a\x00\x0e\x00\x77\x00\x78\x00\x79\x00\x0c\x00\x8c\x00\x0e\x00\x7d\x00\x7e\x00\x7f\x00\x8c\x00\x81\x00\x82\x00\x83\x00\x09\x00\x0a\x00\x8c\x00\x87\x00\x88\x00\x8f\x00\x8a\x00\x8b\x00\x0c\x00\x8c\x00\x0e\x00\x8c\x00\x8d\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x92\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x0c\x00\x20\x00\x0e\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x8f\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x42\x00\x43\x00\x8d\x00\x45\x00\x46\x00\x47\x00\x48\x00\x49\x00\x4a\x00\x01\x00\x4c\x00\x4d\x00\x4e\x00\x8f\x00\x50\x00\x51\x00\x52\x00\x53\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x8d\x00\x61\x00\x62\x00\x63\x00\x8c\x00\x65\x00\x66\x00\x67\x00\x68\x00\x8d\x00\x6a\x00\x6b\x00\x00\x00\x8d\x00\x02\x00\x03\x00\x0c\x00\x05\x00\x0e\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x00\x00\x8d\x00\x02\x00\x03\x00\x0b\x00\x0c\x00\x06\x00\x0e\x00\x08\x00\x00\x00\x0a\x00\x02\x00\x03\x00\x8d\x00\x0c\x00\x06\x00\x0e\x00\x08\x00\x0c\x00\x0a\x00\x0e\x00\x8c\x00\x0c\x00\x0c\x00\x0e\x00\x0e\x00\x8d\x00\x92\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00\x48\x00\x49\x00\x4a\x00\x4b\x00\x4c\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\x51\x00\x52\x00\x53\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x66\x00\x67\x00\x68\x00\x69\x00\x6a\x00\x6b\x00\x00\x00\x8d\x00\x02\x00\x03\x00\x00\x00\x05\x00\x02\x00\x03\x00\x08\x00\x0c\x00\x0a\x00\x0e\x00\x08\x00\x00\x00\x0a\x00\x02\x00\x03\x00\x00\x00\x8c\x00\x02\x00\x03\x00\x08\x00\x0c\x00\x0a\x00\x0e\x00\x08\x00\x0c\x00\x0a\x00\x0e\x00\x09\x00\x0a\x00\x8d\x00\x8c\x00\x8d\x00\x8e\x00\x8d\x00\x90\x00\x91\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x8d\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00\x48\x00\x49\x00\x4a\x00\x4b\x00\x4c\x00\x4d\x00\x4e\x00\x4f\x00\x50\x00\x51\x00\x52\x00\x53\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x66\x00\x67\x00\x68\x00\x69\x00\x6a\x00\x6b\x00\x00\x00\x8c\x00\x02\x00\x03\x00\x00\x00\x8d\x00\x02\x00\x03\x00\x08\x00\x0c\x00\x0a\x00\x0e\x00\x08\x00\x00\x00\x0a\x00\x02\x00\x03\x00\x0c\x00\x0c\x00\x0e\x00\x0e\x00\x08\x00\x0c\x00\x0a\x00\x0e\x00\x01\x00\x0c\x00\x0c\x00\x0e\x00\x0e\x00\x8d\x00\x0c\x00\x8c\x00\x0e\x00\x8e\x00\x01\x00\x90\x00\x91\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x01\x00\x20\x00\x8c\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x8c\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x42\x00\x43\x00\x8c\x00\x45\x00\x46\x00\x47\x00\x48\x00\x49\x00\x4a\x00\x8d\x00\x4c\x00\x4d\x00\x4e\x00\x8d\x00\x50\x00\x51\x00\x52\x00\x53\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x01\x00\x61\x00\x62\x00\x63\x00\x8d\x00\x65\x00\x66\x00\x67\x00\x68\x00\x1f\x00\x6a\x00\x6b\x00\x09\x00\x0a\x00\x09\x00\x0a\x00\x09\x00\x0a\x00\x09\x00\x0a\x00\x09\x00\x0a\x00\x09\x00\x0a\x00\x09\x00\x0a\x00\x8d\x00\x0d\x00\x0e\x00\x09\x00\x0a\x00\x09\x00\x0a\x00\x09\x00\x0a\x00\x09\x00\x0a\x00\x8d\x00\x0d\x00\x0e\x00\x09\x00\x0a\x00\x0d\x00\x0e\x00\x8c\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x72\x00\x73\x00\x74\x00\x75\x00\x76\x00\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\x84\x00\x85\x00\x86\x00\x87\x00\x88\x00\x89\x00\x8a\x00\x8b\x00\x09\x00\x0a\x00\x09\x00\x0a\x00\x09\x00\x0a\x00\x09\x00\x0a\x00\x09\x00\x0a\x00\x8d\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x0e\x00\x0e\x00\x0e\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\xff\xff\xff\xff\xff\xff\x0e\x00\x0e\x00\x0e\x00\xff\xff\xff\xff\xff\xff\xff\xff\x07\x00\xff\xff\xff\xff\x0e\x00\x0e\x00\x0e\x00\x0e\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"#

happyTable :: HappyAddr
happyTable = HappyA# "\x00\x00\x03\x00\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\xff\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\x53\xff\xac\x00\x53\xff\x53\xff\x53\xff\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\xac\x00\x23\x00\x6d\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\xae\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x42\x00\x43\x00\x44\x00\x6b\x00\x45\x00\x46\x00\x47\x00\x48\x00\x49\x00\x4a\x00\x9e\x00\x4b\x00\x4c\x00\x4d\x00\x9d\x00\x4e\x00\x4f\x00\x50\x00\x51\x00\x52\x00\x53\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x9c\x00\x5e\x00\x5f\x00\x60\x00\x9b\x00\x61\x00\x62\x00\x63\x00\x64\x00\x6f\x00\x65\x00\x66\x00\x03\x00\x9a\x00\x74\x00\x75\x00\x76\x00\x98\x00\x04\x00\x6d\x00\x7a\x00\x7b\x00\x7c\x00\x97\x00\x97\x00\x6d\x00\x80\x00\x81\x00\x82\x00\x96\x00\xa1\x00\xa2\x00\xa3\x00\x67\x00\x68\x00\xaa\x00\x8a\x00\x8b\x00\x6b\x00\x8d\x00\x8e\x00\x93\x00\x95\x00\x6d\x00\x67\x00\xe2\xff\xd5\x00\xd6\x00\xb4\x00\xd7\x00\xe2\xff\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x92\x00\x23\x00\x6d\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x6b\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x42\x00\x43\x00\x44\x00\xe3\x00\x45\x00\x46\x00\x47\x00\x48\x00\x49\x00\x4a\x00\xe2\x00\x4b\x00\x4c\x00\x4d\x00\x6b\x00\x4e\x00\x4f\x00\x50\x00\x51\x00\x52\x00\x53\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x04\x01\x5e\x00\x5f\x00\x60\x00\xb2\x00\x61\x00\x62\x00\x63\x00\x64\x00\x03\x01\x65\x00\x66\x00\xc1\x00\x01\x01\xc2\x00\xc3\x00\x90\x00\xed\x00\x6d\x00\xee\x00\xef\x00\x67\x00\xf0\x00\xc1\x00\x00\x01\xc2\x00\xc3\x00\xeb\x00\xec\x00\xf4\x00\x6d\x00\xf5\x00\xc1\x00\xc5\x00\xc2\x00\xc3\x00\xff\x00\x8f\x00\x0a\x01\x6d\x00\x0b\x01\x6c\x00\xc5\x00\x6d\x00\x67\x00\xdf\x00\xde\x00\x6d\x00\x6d\x00\xfe\x00\xe5\xff\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\xf2\x00\x23\x00\xc7\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\xc8\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x42\x00\x43\x00\x44\x00\xc9\x00\x45\x00\x46\x00\x47\x00\x48\x00\x49\x00\x4a\x00\xca\x00\x4b\x00\x4c\x00\x4d\x00\xcb\x00\x4e\x00\x4f\x00\x50\x00\x51\x00\x52\x00\x53\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\xcc\x00\x5e\x00\x5f\x00\x60\x00\xcd\x00\x61\x00\x62\x00\x63\x00\x64\x00\xce\x00\x65\x00\x66\x00\xc1\x00\xfd\x00\xc2\x00\xc3\x00\xc1\x00\x10\x01\xc2\x00\xc3\x00\xef\x00\xdd\x00\xc5\x00\x6d\x00\xc4\x00\xc1\x00\xc5\x00\xc2\x00\xc3\x00\xc1\x00\xfc\x00\xc2\x00\xc3\x00\xf6\x00\xda\x00\xc5\x00\xdb\x00\xf3\x00\xd8\x00\xc5\x00\xd9\x00\xc0\x00\x68\x00\xfb\x00\xcf\x00\xe5\xff\x03\x00\xfa\x00\xd0\x00\xd1\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\xf9\x00\x23\x00\xc7\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\xc8\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x42\x00\x43\x00\x44\x00\xc9\x00\x45\x00\x46\x00\x47\x00\x48\x00\x49\x00\x4a\x00\xca\x00\x4b\x00\x4c\x00\x4d\x00\xcb\x00\x4e\x00\x4f\x00\x50\x00\x51\x00\x52\x00\x53\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\xcc\x00\x5e\x00\x5f\x00\x60\x00\xcd\x00\x61\x00\x62\x00\x63\x00\x64\x00\xce\x00\x65\x00\x66\x00\xc1\x00\x09\x01\xc2\x00\xc3\x00\xc1\x00\x10\x01\xc2\x00\xc3\x00\xf2\x00\xbd\x00\xc5\x00\x6d\x00\x0c\x01\xc1\x00\xc5\x00\xc2\x00\xc3\x00\xb3\x00\xb2\x00\x6d\x00\x6d\x00\x11\x01\xe8\x00\xc5\x00\x6d\x00\xf8\x00\xe6\x00\xe5\x00\x6d\x00\x6d\x00\x0f\x01\xe4\x00\xcf\x00\x6d\x00\x03\x00\x0e\x01\xd0\x00\xd1\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\xe2\x00\x23\x00\x08\x01\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x2e\x00\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x07\x01\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x42\x00\x43\x00\x44\x00\x06\x01\x45\x00\x46\x00\x47\x00\x48\x00\x49\x00\x4a\x00\x05\x01\x4b\x00\x4c\x00\x4d\x00\x13\x01\x4e\x00\x4f\x00\x50\x00\x51\x00\x52\x00\x53\x00\x54\x00\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x1c\x01\x5e\x00\x5f\x00\x60\x00\x1b\x01\x61\x00\x62\x00\x63\x00\x64\x00\xf2\x00\x65\x00\x66\x00\xbf\x00\x68\x00\xbe\x00\x68\x00\xbc\x00\x68\x00\xbb\x00\x68\x00\xba\x00\x68\x00\xb9\x00\x68\x00\xb8\x00\x68\x00\x1a\x01\xb4\x00\xb5\x00\xb0\x00\x68\x00\xaf\x00\x68\x00\xae\x00\x68\x00\x01\x01\x68\x00\x19\x01\xe9\x00\xea\x00\xe3\x00\x68\x00\xe9\x00\xea\x00\x67\x00\x6f\x00\x70\x00\x71\x00\x72\x00\x73\x00\x74\x00\x75\x00\x76\x00\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\x84\x00\x85\x00\x86\x00\x87\x00\x88\x00\x89\x00\x8a\x00\x8b\x00\x8c\x00\x8d\x00\x8e\x00\x09\x01\x68\x00\x16\x01\x68\x00\x15\x01\x68\x00\x14\x01\x68\x00\x13\x01\x68\x00\x18\x01\xaa\x00\xa8\x00\xa7\x00\xa6\x00\xa5\x00\xa4\x00\xa3\x00\x9f\x00\x9e\x00\x91\x00\x8e\x00\x6b\x00\x69\x00\xd4\x00\xd3\x00\x00\x00\x00\x00\x00\x00\xe0\x00\xdc\x00\xd2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x01\x00\x00\x00\x00\xd1\x00\xb7\x00\xb6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"#

happyReduceArr = Happy_Data_Array.array (1, 174) [
	(1 , happyReduce_1),
	(2 , happyReduce_2),
	(3 , happyReduce_3),
	(4 , happyReduce_4),
	(5 , happyReduce_5),
	(6 , happyReduce_6),
	(7 , happyReduce_7),
	(8 , happyReduce_8),
	(9 , happyReduce_9),
	(10 , happyReduce_10),
	(11 , happyReduce_11),
	(12 , happyReduce_12),
	(13 , happyReduce_13),
	(14 , happyReduce_14),
	(15 , happyReduce_15),
	(16 , happyReduce_16),
	(17 , happyReduce_17),
	(18 , happyReduce_18),
	(19 , happyReduce_19),
	(20 , happyReduce_20),
	(21 , happyReduce_21),
	(22 , happyReduce_22),
	(23 , happyReduce_23),
	(24 , happyReduce_24),
	(25 , happyReduce_25),
	(26 , happyReduce_26),
	(27 , happyReduce_27),
	(28 , happyReduce_28),
	(29 , happyReduce_29),
	(30 , happyReduce_30),
	(31 , happyReduce_31),
	(32 , happyReduce_32),
	(33 , happyReduce_33),
	(34 , happyReduce_34),
	(35 , happyReduce_35),
	(36 , happyReduce_36),
	(37 , happyReduce_37),
	(38 , happyReduce_38),
	(39 , happyReduce_39),
	(40 , happyReduce_40),
	(41 , happyReduce_41),
	(42 , happyReduce_42),
	(43 , happyReduce_43),
	(44 , happyReduce_44),
	(45 , happyReduce_45),
	(46 , happyReduce_46),
	(47 , happyReduce_47),
	(48 , happyReduce_48),
	(49 , happyReduce_49),
	(50 , happyReduce_50),
	(51 , happyReduce_51),
	(52 , happyReduce_52),
	(53 , happyReduce_53),
	(54 , happyReduce_54),
	(55 , happyReduce_55),
	(56 , happyReduce_56),
	(57 , happyReduce_57),
	(58 , happyReduce_58),
	(59 , happyReduce_59),
	(60 , happyReduce_60),
	(61 , happyReduce_61),
	(62 , happyReduce_62),
	(63 , happyReduce_63),
	(64 , happyReduce_64),
	(65 , happyReduce_65),
	(66 , happyReduce_66),
	(67 , happyReduce_67),
	(68 , happyReduce_68),
	(69 , happyReduce_69),
	(70 , happyReduce_70),
	(71 , happyReduce_71),
	(72 , happyReduce_72),
	(73 , happyReduce_73),
	(74 , happyReduce_74),
	(75 , happyReduce_75),
	(76 , happyReduce_76),
	(77 , happyReduce_77),
	(78 , happyReduce_78),
	(79 , happyReduce_79),
	(80 , happyReduce_80),
	(81 , happyReduce_81),
	(82 , happyReduce_82),
	(83 , happyReduce_83),
	(84 , happyReduce_84),
	(85 , happyReduce_85),
	(86 , happyReduce_86),
	(87 , happyReduce_87),
	(88 , happyReduce_88),
	(89 , happyReduce_89),
	(90 , happyReduce_90),
	(91 , happyReduce_91),
	(92 , happyReduce_92),
	(93 , happyReduce_93),
	(94 , happyReduce_94),
	(95 , happyReduce_95),
	(96 , happyReduce_96),
	(97 , happyReduce_97),
	(98 , happyReduce_98),
	(99 , happyReduce_99),
	(100 , happyReduce_100),
	(101 , happyReduce_101),
	(102 , happyReduce_102),
	(103 , happyReduce_103),
	(104 , happyReduce_104),
	(105 , happyReduce_105),
	(106 , happyReduce_106),
	(107 , happyReduce_107),
	(108 , happyReduce_108),
	(109 , happyReduce_109),
	(110 , happyReduce_110),
	(111 , happyReduce_111),
	(112 , happyReduce_112),
	(113 , happyReduce_113),
	(114 , happyReduce_114),
	(115 , happyReduce_115),
	(116 , happyReduce_116),
	(117 , happyReduce_117),
	(118 , happyReduce_118),
	(119 , happyReduce_119),
	(120 , happyReduce_120),
	(121 , happyReduce_121),
	(122 , happyReduce_122),
	(123 , happyReduce_123),
	(124 , happyReduce_124),
	(125 , happyReduce_125),
	(126 , happyReduce_126),
	(127 , happyReduce_127),
	(128 , happyReduce_128),
	(129 , happyReduce_129),
	(130 , happyReduce_130),
	(131 , happyReduce_131),
	(132 , happyReduce_132),
	(133 , happyReduce_133),
	(134 , happyReduce_134),
	(135 , happyReduce_135),
	(136 , happyReduce_136),
	(137 , happyReduce_137),
	(138 , happyReduce_138),
	(139 , happyReduce_139),
	(140 , happyReduce_140),
	(141 , happyReduce_141),
	(142 , happyReduce_142),
	(143 , happyReduce_143),
	(144 , happyReduce_144),
	(145 , happyReduce_145),
	(146 , happyReduce_146),
	(147 , happyReduce_147),
	(148 , happyReduce_148),
	(149 , happyReduce_149),
	(150 , happyReduce_150),
	(151 , happyReduce_151),
	(152 , happyReduce_152),
	(153 , happyReduce_153),
	(154 , happyReduce_154),
	(155 , happyReduce_155),
	(156 , happyReduce_156),
	(157 , happyReduce_157),
	(158 , happyReduce_158),
	(159 , happyReduce_159),
	(160 , happyReduce_160),
	(161 , happyReduce_161),
	(162 , happyReduce_162),
	(163 , happyReduce_163),
	(164 , happyReduce_164),
	(165 , happyReduce_165),
	(166 , happyReduce_166),
	(167 , happyReduce_167),
	(168 , happyReduce_168),
	(169 , happyReduce_169),
	(170 , happyReduce_170),
	(171 , happyReduce_171),
	(172 , happyReduce_172),
	(173 , happyReduce_173),
	(174 , happyReduce_174)
	]

happy_n_terms = 147 :: Int
happy_n_nonterms = 15 :: Int

happyReduce_1 = happySpecReduce_1  0# happyReduction_1
happyReduction_1 happy_x_1
	 =  case happyOutTok happy_x_1 of { (PT _ (T_Int happy_var_1)) -> 
	happyIn4
		 (Michelson.Abs.Int happy_var_1
	)}

happyReduce_2 = happySpecReduce_1  1# happyReduction_2
happyReduction_2 happy_x_1
	 =  case happyOutTok happy_x_1 of { (PT _ (T_Nat happy_var_1)) -> 
	happyIn5
		 (Michelson.Abs.Nat happy_var_1
	)}

happyReduce_3 = happySpecReduce_1  2# happyReduction_3
happyReduction_3 happy_x_1
	 =  case happyOutTok happy_x_1 of { (PT _ (T_Str happy_var_1)) -> 
	happyIn6
		 (Michelson.Abs.Str happy_var_1
	)}

happyReduce_4 = happySpecReduce_1  3# happyReduction_4
happyReduction_4 happy_x_1
	 =  case happyOutTok happy_x_1 of { (PT _ (T_Hex happy_var_1)) -> 
	happyIn7
		 (Michelson.Abs.Hex happy_var_1
	)}

happyReduce_5 = happySpecReduce_3  4# happyReduction_5
happyReduction_5 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut14 happy_x_1 of { (HappyWrap14 happy_var_1) -> 
	case happyOut13 happy_x_3 of { (HappyWrap13 happy_var_3) -> 
	happyIn8
		 (Michelson.Abs.Code happy_var_1 happy_var_3
	)}}

happyReduce_6 = happySpecReduce_0  5# happyReduction_6
happyReduction_6  =  happyIn9
		 ([]
	)

happyReduce_7 = happySpecReduce_3  5# happyReduction_7
happyReduction_7 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut12 happy_x_1 of { (HappyWrap12 happy_var_1) -> 
	case happyOut9 happy_x_3 of { (HappyWrap9 happy_var_3) -> 
	happyIn9
		 ((:) happy_var_1 happy_var_3
	)}}

happyReduce_8 = happySpecReduce_2  6# happyReduction_8
happyReduction_8 happy_x_2
	happy_x_1
	 =  case happyOut12 happy_x_1 of { (HappyWrap12 happy_var_1) -> 
	case happyOut12 happy_x_2 of { (HappyWrap12 happy_var_2) -> 
	happyIn10
		 (Michelson.Abs.DPairSeq1 happy_var_1 happy_var_2
	)}}

happyReduce_9 = happySpecReduce_2  6# happyReduction_9
happyReduction_9 happy_x_2
	happy_x_1
	 =  case happyOut12 happy_x_1 of { (HappyWrap12 happy_var_1) -> 
	case happyOut10 happy_x_2 of { (HappyWrap10 happy_var_2) -> 
	happyIn10
		 (Michelson.Abs.DPairSeq2 happy_var_1 happy_var_2
	)}}

happyReduce_10 = happyReduce 4# 7# happyReduction_10
happyReduction_10 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut12 happy_x_2 of { (HappyWrap12 happy_var_2) -> 
	case happyOut12 happy_x_3 of { (HappyWrap12 happy_var_3) -> 
	happyIn11
		 (Michelson.Abs.DMapSeq1 happy_var_2 happy_var_3
	) `HappyStk` happyRest}}

happyReduce_11 = happyReduce 5# 7# happyReduction_11
happyReduction_11 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut12 happy_x_2 of { (HappyWrap12 happy_var_2) -> 
	case happyOut12 happy_x_3 of { (HappyWrap12 happy_var_3) -> 
	case happyOut11 happy_x_5 of { (HappyWrap11 happy_var_5) -> 
	happyIn11
		 (Michelson.Abs.DMapSeq2 happy_var_2 happy_var_3 happy_var_5
	) `HappyStk` happyRest}}}

happyReduce_12 = happySpecReduce_1  8# happyReduction_12
happyReduction_12 happy_x_1
	 =  case happyOut4 happy_x_1 of { (HappyWrap4 happy_var_1) -> 
	happyIn12
		 (Michelson.Abs.DInt happy_var_1
	)}

happyReduce_13 = happySpecReduce_1  8# happyReduction_13
happyReduction_13 happy_x_1
	 =  case happyOut6 happy_x_1 of { (HappyWrap6 happy_var_1) -> 
	happyIn12
		 (Michelson.Abs.DStr happy_var_1
	)}

happyReduce_14 = happySpecReduce_1  8# happyReduction_14
happyReduction_14 happy_x_1
	 =  case happyOut7 happy_x_1 of { (HappyWrap7 happy_var_1) -> 
	happyIn12
		 (Michelson.Abs.DByte happy_var_1
	)}

happyReduce_15 = happySpecReduce_1  8# happyReduction_15
happyReduction_15 happy_x_1
	 =  happyIn12
		 (Michelson.Abs.DUnit
	)

happyReduce_16 = happySpecReduce_1  8# happyReduction_16
happyReduction_16 happy_x_1
	 =  happyIn12
		 (Michelson.Abs.DTrue
	)

happyReduce_17 = happySpecReduce_1  8# happyReduction_17
happyReduction_17 happy_x_1
	 =  happyIn12
		 (Michelson.Abs.DFalse
	)

happyReduce_18 = happySpecReduce_2  8# happyReduction_18
happyReduction_18 happy_x_2
	happy_x_1
	 =  case happyOut10 happy_x_2 of { (HappyWrap10 happy_var_2) -> 
	happyIn12
		 (Michelson.Abs.DPair2 happy_var_2
	)}

happyReduce_19 = happySpecReduce_2  8# happyReduction_19
happyReduction_19 happy_x_2
	happy_x_1
	 =  case happyOut12 happy_x_2 of { (HappyWrap12 happy_var_2) -> 
	happyIn12
		 (Michelson.Abs.DLeft happy_var_2
	)}

happyReduce_20 = happySpecReduce_2  8# happyReduction_20
happyReduction_20 happy_x_2
	happy_x_1
	 =  case happyOut12 happy_x_2 of { (HappyWrap12 happy_var_2) -> 
	happyIn12
		 (Michelson.Abs.DRight happy_var_2
	)}

happyReduce_21 = happySpecReduce_2  8# happyReduction_21
happyReduction_21 happy_x_2
	happy_x_1
	 =  case happyOut12 happy_x_2 of { (HappyWrap12 happy_var_2) -> 
	happyIn12
		 (Michelson.Abs.DSome happy_var_2
	)}

happyReduce_22 = happySpecReduce_1  8# happyReduction_22
happyReduction_22 happy_x_1
	 =  happyIn12
		 (Michelson.Abs.DNone
	)

happyReduce_23 = happySpecReduce_3  8# happyReduction_23
happyReduction_23 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut9 happy_x_2 of { (HappyWrap9 happy_var_2) -> 
	happyIn12
		 (Michelson.Abs.DBlock happy_var_2
	)}

happyReduce_24 = happySpecReduce_3  8# happyReduction_24
happyReduction_24 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut11 happy_x_2 of { (HappyWrap11 happy_var_2) -> 
	happyIn12
		 (Michelson.Abs.DMap happy_var_2
	)}

happyReduce_25 = happySpecReduce_1  8# happyReduction_25
happyReduction_25 happy_x_1
	 =  case happyOut14 happy_x_1 of { (HappyWrap14 happy_var_1) -> 
	happyIn12
		 (Michelson.Abs.DInstr happy_var_1
	)}

happyReduce_26 = happySpecReduce_0  9# happyReduction_26
happyReduction_26  =  happyIn13
		 ([]
	)

happyReduce_27 = happySpecReduce_1  9# happyReduction_27
happyReduction_27 happy_x_1
	 =  case happyOut14 happy_x_1 of { (HappyWrap14 happy_var_1) -> 
	happyIn13
		 ((:[]) happy_var_1
	)}

happyReduce_28 = happySpecReduce_3  9# happyReduction_28
happyReduction_28 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut14 happy_x_1 of { (HappyWrap14 happy_var_1) -> 
	case happyOut13 happy_x_3 of { (HappyWrap13 happy_var_3) -> 
	happyIn13
		 ((:) happy_var_1 happy_var_3
	)}}

happyReduce_29 = happySpecReduce_2  10# happyReduction_29
happyReduction_29 happy_x_2
	happy_x_1
	 =  case happyOut14 happy_x_1 of { (HappyWrap14 happy_var_1) -> 
	happyIn14
		 (happy_var_1
	)}

happyReduce_30 = happySpecReduce_3  10# happyReduction_30
happyReduction_30 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut13 happy_x_2 of { (HappyWrap13 happy_var_2) -> 
	happyIn14
		 (Michelson.Abs.IBLOCK happy_var_2
	)}

happyReduce_31 = happySpecReduce_1  10# happyReduction_31
happyReduction_31 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.IDROP
	)

happyReduce_32 = happySpecReduce_2  10# happyReduction_32
happyReduction_32 happy_x_2
	happy_x_1
	 =  case happyOut5 happy_x_2 of { (HappyWrap5 happy_var_2) -> 
	happyIn14
		 (Michelson.Abs.IDROP_N happy_var_2
	)}

happyReduce_33 = happySpecReduce_1  10# happyReduction_33
happyReduction_33 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.IDUP
	)

happyReduce_34 = happySpecReduce_2  10# happyReduction_34
happyReduction_34 happy_x_2
	happy_x_1
	 =  case happyOut5 happy_x_2 of { (HappyWrap5 happy_var_2) -> 
	happyIn14
		 (Michelson.Abs.IDUP_N happy_var_2
	)}

happyReduce_35 = happySpecReduce_1  10# happyReduction_35
happyReduction_35 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.ISWAP
	)

happyReduce_36 = happySpecReduce_2  10# happyReduction_36
happyReduction_36 happy_x_2
	happy_x_1
	 =  case happyOut5 happy_x_2 of { (HappyWrap5 happy_var_2) -> 
	happyIn14
		 (Michelson.Abs.IDIG_N happy_var_2
	)}

happyReduce_37 = happySpecReduce_2  10# happyReduction_37
happyReduction_37 happy_x_2
	happy_x_1
	 =  case happyOut5 happy_x_2 of { (HappyWrap5 happy_var_2) -> 
	happyIn14
		 (Michelson.Abs.IDUG_N happy_var_2
	)}

happyReduce_38 = happySpecReduce_3  10# happyReduction_38
happyReduction_38 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut16 happy_x_2 of { (HappyWrap16 happy_var_2) -> 
	case happyOut12 happy_x_3 of { (HappyWrap12 happy_var_3) -> 
	happyIn14
		 (Michelson.Abs.IPUSH happy_var_2 happy_var_3
	)}}

happyReduce_39 = happySpecReduce_1  10# happyReduction_39
happyReduction_39 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.ISOME
	)

happyReduce_40 = happySpecReduce_2  10# happyReduction_40
happyReduction_40 happy_x_2
	happy_x_1
	 =  case happyOut16 happy_x_2 of { (HappyWrap16 happy_var_2) -> 
	happyIn14
		 (Michelson.Abs.INONE happy_var_2
	)}

happyReduce_41 = happySpecReduce_1  10# happyReduction_41
happyReduction_41 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.IUNIT
	)

happyReduce_42 = happySpecReduce_1  10# happyReduction_42
happyReduction_42 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.INEVER
	)

happyReduce_43 = happyReduce 7# 10# happyReduction_43
happyReduction_43 (happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut13 happy_x_3 of { (HappyWrap13 happy_var_3) -> 
	case happyOut13 happy_x_6 of { (HappyWrap13 happy_var_6) -> 
	happyIn14
		 (Michelson.Abs.IIF_NONE happy_var_3 happy_var_6
	) `HappyStk` happyRest}}

happyReduce_44 = happySpecReduce_1  10# happyReduction_44
happyReduction_44 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.IPAIR
	)

happyReduce_45 = happySpecReduce_2  10# happyReduction_45
happyReduction_45 happy_x_2
	happy_x_1
	 =  case happyOut5 happy_x_2 of { (HappyWrap5 happy_var_2) -> 
	happyIn14
		 (Michelson.Abs.IPAIR_N happy_var_2
	)}

happyReduce_46 = happySpecReduce_1  10# happyReduction_46
happyReduction_46 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.ICAR
	)

happyReduce_47 = happySpecReduce_1  10# happyReduction_47
happyReduction_47 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.ICDR
	)

happyReduce_48 = happySpecReduce_1  10# happyReduction_48
happyReduction_48 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.IUNPAIR
	)

happyReduce_49 = happySpecReduce_2  10# happyReduction_49
happyReduction_49 happy_x_2
	happy_x_1
	 =  case happyOut5 happy_x_2 of { (HappyWrap5 happy_var_2) -> 
	happyIn14
		 (Michelson.Abs.IUNPAIR_N happy_var_2
	)}

happyReduce_50 = happySpecReduce_2  10# happyReduction_50
happyReduction_50 happy_x_2
	happy_x_1
	 =  case happyOut16 happy_x_2 of { (HappyWrap16 happy_var_2) -> 
	happyIn14
		 (Michelson.Abs.ILEFT happy_var_2
	)}

happyReduce_51 = happySpecReduce_2  10# happyReduction_51
happyReduction_51 happy_x_2
	happy_x_1
	 =  case happyOut16 happy_x_2 of { (HappyWrap16 happy_var_2) -> 
	happyIn14
		 (Michelson.Abs.IRIGHT happy_var_2
	)}

happyReduce_52 = happyReduce 7# 10# happyReduction_52
happyReduction_52 (happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut13 happy_x_3 of { (HappyWrap13 happy_var_3) -> 
	case happyOut13 happy_x_6 of { (HappyWrap13 happy_var_6) -> 
	happyIn14
		 (Michelson.Abs.IIF_LEFT happy_var_3 happy_var_6
	) `HappyStk` happyRest}}

happyReduce_53 = happySpecReduce_2  10# happyReduction_53
happyReduction_53 happy_x_2
	happy_x_1
	 =  case happyOut16 happy_x_2 of { (HappyWrap16 happy_var_2) -> 
	happyIn14
		 (Michelson.Abs.INIL happy_var_2
	)}

happyReduce_54 = happySpecReduce_1  10# happyReduction_54
happyReduction_54 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.ICONS
	)

happyReduce_55 = happyReduce 7# 10# happyReduction_55
happyReduction_55 (happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut13 happy_x_3 of { (HappyWrap13 happy_var_3) -> 
	case happyOut13 happy_x_6 of { (HappyWrap13 happy_var_6) -> 
	happyIn14
		 (Michelson.Abs.IIF_CONS happy_var_3 happy_var_6
	) `HappyStk` happyRest}}

happyReduce_56 = happySpecReduce_1  10# happyReduction_56
happyReduction_56 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.ISIZE
	)

happyReduce_57 = happySpecReduce_2  10# happyReduction_57
happyReduction_57 happy_x_2
	happy_x_1
	 =  case happyOut18 happy_x_2 of { (HappyWrap18 happy_var_2) -> 
	happyIn14
		 (Michelson.Abs.IEMPTY_SET happy_var_2
	)}

happyReduce_58 = happySpecReduce_3  10# happyReduction_58
happyReduction_58 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut18 happy_x_2 of { (HappyWrap18 happy_var_2) -> 
	case happyOut16 happy_x_3 of { (HappyWrap16 happy_var_3) -> 
	happyIn14
		 (Michelson.Abs.IEMPTY_MAP happy_var_2 happy_var_3
	)}}

happyReduce_59 = happySpecReduce_3  10# happyReduction_59
happyReduction_59 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut18 happy_x_2 of { (HappyWrap18 happy_var_2) -> 
	case happyOut16 happy_x_3 of { (HappyWrap16 happy_var_3) -> 
	happyIn14
		 (Michelson.Abs.IEMPTY_BIG_MAP happy_var_2 happy_var_3
	)}}

happyReduce_60 = happyReduce 4# 10# happyReduction_60
happyReduction_60 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut13 happy_x_3 of { (HappyWrap13 happy_var_3) -> 
	happyIn14
		 (Michelson.Abs.IMAP happy_var_3
	) `HappyStk` happyRest}

happyReduce_61 = happyReduce 4# 10# happyReduction_61
happyReduction_61 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut13 happy_x_3 of { (HappyWrap13 happy_var_3) -> 
	happyIn14
		 (Michelson.Abs.IITER happy_var_3
	) `HappyStk` happyRest}

happyReduce_62 = happySpecReduce_1  10# happyReduction_62
happyReduction_62 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.IMEM
	)

happyReduce_63 = happySpecReduce_1  10# happyReduction_63
happyReduction_63 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.IGET
	)

happyReduce_64 = happySpecReduce_2  10# happyReduction_64
happyReduction_64 happy_x_2
	happy_x_1
	 =  case happyOut5 happy_x_2 of { (HappyWrap5 happy_var_2) -> 
	happyIn14
		 (Michelson.Abs.IGET_N happy_var_2
	)}

happyReduce_65 = happySpecReduce_1  10# happyReduction_65
happyReduction_65 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.IUPDATE
	)

happyReduce_66 = happySpecReduce_2  10# happyReduction_66
happyReduction_66 happy_x_2
	happy_x_1
	 =  case happyOut5 happy_x_2 of { (HappyWrap5 happy_var_2) -> 
	happyIn14
		 (Michelson.Abs.IUPDATE_N happy_var_2
	)}

happyReduce_67 = happyReduce 7# 10# happyReduction_67
happyReduction_67 (happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut13 happy_x_3 of { (HappyWrap13 happy_var_3) -> 
	case happyOut13 happy_x_6 of { (HappyWrap13 happy_var_6) -> 
	happyIn14
		 (Michelson.Abs.IIF happy_var_3 happy_var_6
	) `HappyStk` happyRest}}

happyReduce_68 = happyReduce 4# 10# happyReduction_68
happyReduction_68 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut13 happy_x_3 of { (HappyWrap13 happy_var_3) -> 
	happyIn14
		 (Michelson.Abs.ILOOP happy_var_3
	) `HappyStk` happyRest}

happyReduce_69 = happyReduce 4# 10# happyReduction_69
happyReduction_69 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut13 happy_x_3 of { (HappyWrap13 happy_var_3) -> 
	happyIn14
		 (Michelson.Abs.ILOOP_LEFT happy_var_3
	) `HappyStk` happyRest}

happyReduce_70 = happyReduce 6# 10# happyReduction_70
happyReduction_70 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut16 happy_x_2 of { (HappyWrap16 happy_var_2) -> 
	case happyOut16 happy_x_3 of { (HappyWrap16 happy_var_3) -> 
	case happyOut13 happy_x_5 of { (HappyWrap13 happy_var_5) -> 
	happyIn14
		 (Michelson.Abs.ILAMBDA happy_var_2 happy_var_3 happy_var_5
	) `HappyStk` happyRest}}}

happyReduce_71 = happySpecReduce_1  10# happyReduction_71
happyReduction_71 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.IEXEC
	)

happyReduce_72 = happySpecReduce_1  10# happyReduction_72
happyReduction_72 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.IAPPLY
	)

happyReduce_73 = happyReduce 4# 10# happyReduction_73
happyReduction_73 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut13 happy_x_3 of { (HappyWrap13 happy_var_3) -> 
	happyIn14
		 (Michelson.Abs.IDIP happy_var_3
	) `HappyStk` happyRest}

happyReduce_74 = happyReduce 5# 10# happyReduction_74
happyReduction_74 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut5 happy_x_2 of { (HappyWrap5 happy_var_2) -> 
	case happyOut13 happy_x_4 of { (HappyWrap13 happy_var_4) -> 
	happyIn14
		 (Michelson.Abs.IDIP_N happy_var_2 happy_var_4
	) `HappyStk` happyRest}}

happyReduce_75 = happySpecReduce_1  10# happyReduction_75
happyReduction_75 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.IFAILWITH
	)

happyReduce_76 = happySpecReduce_1  10# happyReduction_76
happyReduction_76 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.ICAST
	)

happyReduce_77 = happySpecReduce_1  10# happyReduction_77
happyReduction_77 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.IRENAME
	)

happyReduce_78 = happySpecReduce_1  10# happyReduction_78
happyReduction_78 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.ICONCAT
	)

happyReduce_79 = happySpecReduce_1  10# happyReduction_79
happyReduction_79 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.ISLICE
	)

happyReduce_80 = happySpecReduce_1  10# happyReduction_80
happyReduction_80 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.IPACK
	)

happyReduce_81 = happySpecReduce_2  10# happyReduction_81
happyReduction_81 happy_x_2
	happy_x_1
	 =  case happyOut16 happy_x_2 of { (HappyWrap16 happy_var_2) -> 
	happyIn14
		 (Michelson.Abs.IUNPACK happy_var_2
	)}

happyReduce_82 = happySpecReduce_1  10# happyReduction_82
happyReduction_82 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.IADD
	)

happyReduce_83 = happySpecReduce_1  10# happyReduction_83
happyReduction_83 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.ISUB
	)

happyReduce_84 = happySpecReduce_1  10# happyReduction_84
happyReduction_84 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.IMUL
	)

happyReduce_85 = happySpecReduce_1  10# happyReduction_85
happyReduction_85 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.IEDIC
	)

happyReduce_86 = happySpecReduce_1  10# happyReduction_86
happyReduction_86 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.IABS
	)

happyReduce_87 = happySpecReduce_1  10# happyReduction_87
happyReduction_87 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.ISNAT
	)

happyReduce_88 = happySpecReduce_1  10# happyReduction_88
happyReduction_88 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.IINT
	)

happyReduce_89 = happySpecReduce_1  10# happyReduction_89
happyReduction_89 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.INEG
	)

happyReduce_90 = happySpecReduce_1  10# happyReduction_90
happyReduction_90 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.ILSL
	)

happyReduce_91 = happySpecReduce_1  10# happyReduction_91
happyReduction_91 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.ILSR
	)

happyReduce_92 = happySpecReduce_1  10# happyReduction_92
happyReduction_92 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.IOR
	)

happyReduce_93 = happySpecReduce_1  10# happyReduction_93
happyReduction_93 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.IAND
	)

happyReduce_94 = happySpecReduce_1  10# happyReduction_94
happyReduction_94 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.IXOR
	)

happyReduce_95 = happySpecReduce_1  10# happyReduction_95
happyReduction_95 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.INOT
	)

happyReduce_96 = happySpecReduce_1  10# happyReduction_96
happyReduction_96 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.ICOMPARE
	)

happyReduce_97 = happySpecReduce_1  10# happyReduction_97
happyReduction_97 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.IEQ
	)

happyReduce_98 = happySpecReduce_1  10# happyReduction_98
happyReduction_98 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.INEQ
	)

happyReduce_99 = happySpecReduce_1  10# happyReduction_99
happyReduction_99 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.ILT
	)

happyReduce_100 = happySpecReduce_1  10# happyReduction_100
happyReduction_100 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.IGT
	)

happyReduce_101 = happySpecReduce_1  10# happyReduction_101
happyReduction_101 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.ILE
	)

happyReduce_102 = happySpecReduce_1  10# happyReduction_102
happyReduction_102 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.IGE
	)

happyReduce_103 = happySpecReduce_1  10# happyReduction_103
happyReduction_103 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.ISELF
	)

happyReduce_104 = happySpecReduce_1  10# happyReduction_104
happyReduction_104 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.ISELF_ADDRESS
	)

happyReduce_105 = happySpecReduce_2  10# happyReduction_105
happyReduction_105 happy_x_2
	happy_x_1
	 =  case happyOut16 happy_x_2 of { (HappyWrap16 happy_var_2) -> 
	happyIn14
		 (Michelson.Abs.ICONTRACT happy_var_2
	)}

happyReduce_106 = happySpecReduce_1  10# happyReduction_106
happyReduction_106 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.ITRANSFER_TOKENS
	)

happyReduce_107 = happySpecReduce_1  10# happyReduction_107
happyReduction_107 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.ISET_DELEGATE
	)

happyReduce_108 = happyReduce 4# 10# happyReduction_108
happyReduction_108 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut13 happy_x_3 of { (HappyWrap13 happy_var_3) -> 
	happyIn14
		 (Michelson.Abs.ICREATE_CONTRACT happy_var_3
	) `HappyStk` happyRest}

happyReduce_109 = happySpecReduce_1  10# happyReduction_109
happyReduction_109 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.IIMPLICIT_ACCOUNT
	)

happyReduce_110 = happySpecReduce_1  10# happyReduction_110
happyReduction_110 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.IVOTING_POWER
	)

happyReduce_111 = happySpecReduce_1  10# happyReduction_111
happyReduction_111 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.INOW
	)

happyReduce_112 = happySpecReduce_1  10# happyReduction_112
happyReduction_112 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.ILEVEL
	)

happyReduce_113 = happySpecReduce_1  10# happyReduction_113
happyReduction_113 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.IAMOUNT
	)

happyReduce_114 = happySpecReduce_1  10# happyReduction_114
happyReduction_114 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.IBALANCE
	)

happyReduce_115 = happySpecReduce_1  10# happyReduction_115
happyReduction_115 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.ICHECK_SIGNATURE
	)

happyReduce_116 = happySpecReduce_1  10# happyReduction_116
happyReduction_116 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.IBLAKE2B
	)

happyReduce_117 = happySpecReduce_1  10# happyReduction_117
happyReduction_117 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.IKECCAK
	)

happyReduce_118 = happySpecReduce_1  10# happyReduction_118
happyReduction_118 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.ISHA3
	)

happyReduce_119 = happySpecReduce_1  10# happyReduction_119
happyReduction_119 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.ISHA256
	)

happyReduce_120 = happySpecReduce_1  10# happyReduction_120
happyReduction_120 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.ISHA512
	)

happyReduce_121 = happySpecReduce_1  10# happyReduction_121
happyReduction_121 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.IHASH_KEY
	)

happyReduce_122 = happySpecReduce_1  10# happyReduction_122
happyReduction_122 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.ISOURCE
	)

happyReduce_123 = happySpecReduce_1  10# happyReduction_123
happyReduction_123 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.ISENDER
	)

happyReduce_124 = happySpecReduce_1  10# happyReduction_124
happyReduction_124 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.IADDRESS
	)

happyReduce_125 = happySpecReduce_1  10# happyReduction_125
happyReduction_125 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.ICHAIN_ID
	)

happyReduce_126 = happySpecReduce_1  10# happyReduction_126
happyReduction_126 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.ITOTAL_VOTING_POWER
	)

happyReduce_127 = happySpecReduce_1  10# happyReduction_127
happyReduction_127 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.IPAIRING_CHECK
	)

happyReduce_128 = happySpecReduce_2  10# happyReduction_128
happyReduction_128 happy_x_2
	happy_x_1
	 =  case happyOut5 happy_x_2 of { (HappyWrap5 happy_var_2) -> 
	happyIn14
		 (Michelson.Abs.ISAPLING_EMPTY_STATE happy_var_2
	)}

happyReduce_129 = happySpecReduce_1  10# happyReduction_129
happyReduction_129 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.ISAPLING_VERIFY_UPDATE
	)

happyReduce_130 = happySpecReduce_1  10# happyReduction_130
happyReduction_130 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.ITICKET
	)

happyReduce_131 = happySpecReduce_1  10# happyReduction_131
happyReduction_131 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.IREAD_TICKET
	)

happyReduce_132 = happySpecReduce_1  10# happyReduction_132
happyReduction_132 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.ISPLIT_TICKET
	)

happyReduce_133 = happySpecReduce_1  10# happyReduction_133
happyReduction_133 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.IJOIN_TICKETS
	)

happyReduce_134 = happySpecReduce_1  10# happyReduction_134
happyReduction_134 happy_x_1
	 =  happyIn14
		 (Michelson.Abs.IOPEN_CHEST
	)

happyReduce_135 = happySpecReduce_2  11# happyReduction_135
happyReduction_135 happy_x_2
	happy_x_1
	 =  case happyOut16 happy_x_1 of { (HappyWrap16 happy_var_1) -> 
	case happyOut16 happy_x_2 of { (HappyWrap16 happy_var_2) -> 
	happyIn15
		 (Michelson.Abs.TTypSeq1 happy_var_1 happy_var_2
	)}}

happyReduce_136 = happySpecReduce_2  11# happyReduction_136
happyReduction_136 happy_x_2
	happy_x_1
	 =  case happyOut16 happy_x_1 of { (HappyWrap16 happy_var_1) -> 
	case happyOut15 happy_x_2 of { (HappyWrap15 happy_var_2) -> 
	happyIn15
		 (Michelson.Abs.TTypSeq2 happy_var_1 happy_var_2
	)}}

happyReduce_137 = happySpecReduce_1  12# happyReduction_137
happyReduction_137 happy_x_1
	 =  case happyOut18 happy_x_1 of { (HappyWrap18 happy_var_1) -> 
	happyIn16
		 (Michelson.Abs.TCtype happy_var_1
	)}

happyReduce_138 = happySpecReduce_2  12# happyReduction_138
happyReduction_138 happy_x_2
	happy_x_1
	 =  case happyOut16 happy_x_2 of { (HappyWrap16 happy_var_2) -> 
	happyIn16
		 (Michelson.Abs.TOption happy_var_2
	)}

happyReduce_139 = happySpecReduce_2  12# happyReduction_139
happyReduction_139 happy_x_2
	happy_x_1
	 =  case happyOut16 happy_x_2 of { (HappyWrap16 happy_var_2) -> 
	happyIn16
		 (Michelson.Abs.TList happy_var_2
	)}

happyReduce_140 = happySpecReduce_2  12# happyReduction_140
happyReduction_140 happy_x_2
	happy_x_1
	 =  case happyOut18 happy_x_2 of { (HappyWrap18 happy_var_2) -> 
	happyIn16
		 (Michelson.Abs.TSet happy_var_2
	)}

happyReduce_141 = happySpecReduce_1  12# happyReduction_141
happyReduction_141 happy_x_1
	 =  happyIn16
		 (Michelson.Abs.TOperation
	)

happyReduce_142 = happySpecReduce_2  12# happyReduction_142
happyReduction_142 happy_x_2
	happy_x_1
	 =  case happyOut16 happy_x_2 of { (HappyWrap16 happy_var_2) -> 
	happyIn16
		 (Michelson.Abs.TContract happy_var_2
	)}

happyReduce_143 = happySpecReduce_2  12# happyReduction_143
happyReduction_143 happy_x_2
	happy_x_1
	 =  case happyOut18 happy_x_2 of { (HappyWrap18 happy_var_2) -> 
	happyIn16
		 (Michelson.Abs.TTicket happy_var_2
	)}

happyReduce_144 = happySpecReduce_2  12# happyReduction_144
happyReduction_144 happy_x_2
	happy_x_1
	 =  case happyOut15 happy_x_2 of { (HappyWrap15 happy_var_2) -> 
	happyIn16
		 (Michelson.Abs.TPair happy_var_2
	)}

happyReduce_145 = happySpecReduce_3  12# happyReduction_145
happyReduction_145 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut16 happy_x_2 of { (HappyWrap16 happy_var_2) -> 
	case happyOut16 happy_x_3 of { (HappyWrap16 happy_var_3) -> 
	happyIn16
		 (Michelson.Abs.TOr happy_var_2 happy_var_3
	)}}

happyReduce_146 = happySpecReduce_3  12# happyReduction_146
happyReduction_146 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut16 happy_x_2 of { (HappyWrap16 happy_var_2) -> 
	case happyOut16 happy_x_3 of { (HappyWrap16 happy_var_3) -> 
	happyIn16
		 (Michelson.Abs.TLambda happy_var_2 happy_var_3
	)}}

happyReduce_147 = happySpecReduce_3  12# happyReduction_147
happyReduction_147 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut18 happy_x_2 of { (HappyWrap18 happy_var_2) -> 
	case happyOut16 happy_x_3 of { (HappyWrap16 happy_var_3) -> 
	happyIn16
		 (Michelson.Abs.TMap happy_var_2 happy_var_3
	)}}

happyReduce_148 = happySpecReduce_3  12# happyReduction_148
happyReduction_148 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut18 happy_x_2 of { (HappyWrap18 happy_var_2) -> 
	case happyOut16 happy_x_3 of { (HappyWrap16 happy_var_3) -> 
	happyIn16
		 (Michelson.Abs.TBig_map happy_var_2 happy_var_3
	)}}

happyReduce_149 = happySpecReduce_1  12# happyReduction_149
happyReduction_149 happy_x_1
	 =  happyIn16
		 (Michelson.Abs.TBls_g1
	)

happyReduce_150 = happySpecReduce_1  12# happyReduction_150
happyReduction_150 happy_x_1
	 =  happyIn16
		 (Michelson.Abs.TBls_g2
	)

happyReduce_151 = happySpecReduce_1  12# happyReduction_151
happyReduction_151 happy_x_1
	 =  happyIn16
		 (Michelson.Abs.TBls_fr
	)

happyReduce_152 = happySpecReduce_2  12# happyReduction_152
happyReduction_152 happy_x_2
	happy_x_1
	 =  case happyOut5 happy_x_2 of { (HappyWrap5 happy_var_2) -> 
	happyIn16
		 (Michelson.Abs.TSapling_transaction happy_var_2
	)}

happyReduce_153 = happySpecReduce_2  12# happyReduction_153
happyReduction_153 happy_x_2
	happy_x_1
	 =  case happyOut5 happy_x_2 of { (HappyWrap5 happy_var_2) -> 
	happyIn16
		 (Michelson.Abs.TSapling_state happy_var_2
	)}

happyReduce_154 = happySpecReduce_1  12# happyReduction_154
happyReduction_154 happy_x_1
	 =  happyIn16
		 (Michelson.Abs.TChest
	)

happyReduce_155 = happySpecReduce_1  12# happyReduction_155
happyReduction_155 happy_x_1
	 =  happyIn16
		 (Michelson.Abs.TChest_key
	)

happyReduce_156 = happySpecReduce_2  13# happyReduction_156
happyReduction_156 happy_x_2
	happy_x_1
	 =  case happyOut18 happy_x_1 of { (HappyWrap18 happy_var_1) -> 
	case happyOut18 happy_x_2 of { (HappyWrap18 happy_var_2) -> 
	happyIn17
		 (Michelson.Abs.CTypSeq1 happy_var_1 happy_var_2
	)}}

happyReduce_157 = happySpecReduce_2  13# happyReduction_157
happyReduction_157 happy_x_2
	happy_x_1
	 =  case happyOut18 happy_x_1 of { (HappyWrap18 happy_var_1) -> 
	case happyOut17 happy_x_2 of { (HappyWrap17 happy_var_2) -> 
	happyIn17
		 (Michelson.Abs.CTypSeq2 happy_var_1 happy_var_2
	)}}

happyReduce_158 = happySpecReduce_1  14# happyReduction_158
happyReduction_158 happy_x_1
	 =  happyIn18
		 (Michelson.Abs.CUnit
	)

happyReduce_159 = happySpecReduce_1  14# happyReduction_159
happyReduction_159 happy_x_1
	 =  happyIn18
		 (Michelson.Abs.CNever
	)

happyReduce_160 = happySpecReduce_1  14# happyReduction_160
happyReduction_160 happy_x_1
	 =  happyIn18
		 (Michelson.Abs.CBool
	)

happyReduce_161 = happySpecReduce_1  14# happyReduction_161
happyReduction_161 happy_x_1
	 =  happyIn18
		 (Michelson.Abs.CInt
	)

happyReduce_162 = happySpecReduce_1  14# happyReduction_162
happyReduction_162 happy_x_1
	 =  happyIn18
		 (Michelson.Abs.CNat
	)

happyReduce_163 = happySpecReduce_1  14# happyReduction_163
happyReduction_163 happy_x_1
	 =  happyIn18
		 (Michelson.Abs.CString
	)

happyReduce_164 = happySpecReduce_1  14# happyReduction_164
happyReduction_164 happy_x_1
	 =  happyIn18
		 (Michelson.Abs.CChain_id
	)

happyReduce_165 = happySpecReduce_1  14# happyReduction_165
happyReduction_165 happy_x_1
	 =  happyIn18
		 (Michelson.Abs.CBytes
	)

happyReduce_166 = happySpecReduce_1  14# happyReduction_166
happyReduction_166 happy_x_1
	 =  happyIn18
		 (Michelson.Abs.CMutez
	)

happyReduce_167 = happySpecReduce_1  14# happyReduction_167
happyReduction_167 happy_x_1
	 =  happyIn18
		 (Michelson.Abs.CKey_hash
	)

happyReduce_168 = happySpecReduce_1  14# happyReduction_168
happyReduction_168 happy_x_1
	 =  happyIn18
		 (Michelson.Abs.CKey
	)

happyReduce_169 = happySpecReduce_1  14# happyReduction_169
happyReduction_169 happy_x_1
	 =  happyIn18
		 (Michelson.Abs.CSignature
	)

happyReduce_170 = happySpecReduce_1  14# happyReduction_170
happyReduction_170 happy_x_1
	 =  happyIn18
		 (Michelson.Abs.CTimestamp
	)

happyReduce_171 = happySpecReduce_1  14# happyReduction_171
happyReduction_171 happy_x_1
	 =  happyIn18
		 (Michelson.Abs.CAddress
	)

happyReduce_172 = happySpecReduce_2  14# happyReduction_172
happyReduction_172 happy_x_2
	happy_x_1
	 =  case happyOut18 happy_x_2 of { (HappyWrap18 happy_var_2) -> 
	happyIn18
		 (Michelson.Abs.COption happy_var_2
	)}

happyReduce_173 = happySpecReduce_3  14# happyReduction_173
happyReduction_173 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut18 happy_x_2 of { (HappyWrap18 happy_var_2) -> 
	case happyOut18 happy_x_3 of { (HappyWrap18 happy_var_3) -> 
	happyIn18
		 (Michelson.Abs.COr happy_var_2 happy_var_3
	)}}

happyReduce_174 = happySpecReduce_2  14# happyReduction_174
happyReduction_174 happy_x_2
	happy_x_1
	 =  case happyOut17 happy_x_2 of { (HappyWrap17 happy_var_2) -> 
	happyIn18
		 (Michelson.Abs.CPair happy_var_2
	)}

happyNewToken action sts stk [] =
	happyDoAction 146# notHappyAtAll action sts stk []

happyNewToken action sts stk (tk:tks) =
	let cont i = happyDoAction i tk action sts stk tks in
	case tk of {
	PT _ (TS _ 1) -> cont 1#;
	PT _ (TS _ 2) -> cont 2#;
	PT _ (TS _ 3) -> cont 3#;
	PT _ (TS _ 4) -> cont 4#;
	PT _ (TS _ 5) -> cont 5#;
	PT _ (TS _ 6) -> cont 6#;
	PT _ (TS _ 7) -> cont 7#;
	PT _ (TS _ 8) -> cont 8#;
	PT _ (TS _ 9) -> cont 9#;
	PT _ (TS _ 10) -> cont 10#;
	PT _ (TS _ 11) -> cont 11#;
	PT _ (TS _ 12) -> cont 12#;
	PT _ (TS _ 13) -> cont 13#;
	PT _ (TS _ 14) -> cont 14#;
	PT _ (TS _ 15) -> cont 15#;
	PT _ (TS _ 16) -> cont 16#;
	PT _ (TS _ 17) -> cont 17#;
	PT _ (TS _ 18) -> cont 18#;
	PT _ (TS _ 19) -> cont 19#;
	PT _ (TS _ 20) -> cont 20#;
	PT _ (TS _ 21) -> cont 21#;
	PT _ (TS _ 22) -> cont 22#;
	PT _ (TS _ 23) -> cont 23#;
	PT _ (TS _ 24) -> cont 24#;
	PT _ (TS _ 25) -> cont 25#;
	PT _ (TS _ 26) -> cont 26#;
	PT _ (TS _ 27) -> cont 27#;
	PT _ (TS _ 28) -> cont 28#;
	PT _ (TS _ 29) -> cont 29#;
	PT _ (TS _ 30) -> cont 30#;
	PT _ (TS _ 31) -> cont 31#;
	PT _ (TS _ 32) -> cont 32#;
	PT _ (TS _ 33) -> cont 33#;
	PT _ (TS _ 34) -> cont 34#;
	PT _ (TS _ 35) -> cont 35#;
	PT _ (TS _ 36) -> cont 36#;
	PT _ (TS _ 37) -> cont 37#;
	PT _ (TS _ 38) -> cont 38#;
	PT _ (TS _ 39) -> cont 39#;
	PT _ (TS _ 40) -> cont 40#;
	PT _ (TS _ 41) -> cont 41#;
	PT _ (TS _ 42) -> cont 42#;
	PT _ (TS _ 43) -> cont 43#;
	PT _ (TS _ 44) -> cont 44#;
	PT _ (TS _ 45) -> cont 45#;
	PT _ (TS _ 46) -> cont 46#;
	PT _ (TS _ 47) -> cont 47#;
	PT _ (TS _ 48) -> cont 48#;
	PT _ (TS _ 49) -> cont 49#;
	PT _ (TS _ 50) -> cont 50#;
	PT _ (TS _ 51) -> cont 51#;
	PT _ (TS _ 52) -> cont 52#;
	PT _ (TS _ 53) -> cont 53#;
	PT _ (TS _ 54) -> cont 54#;
	PT _ (TS _ 55) -> cont 55#;
	PT _ (TS _ 56) -> cont 56#;
	PT _ (TS _ 57) -> cont 57#;
	PT _ (TS _ 58) -> cont 58#;
	PT _ (TS _ 59) -> cont 59#;
	PT _ (TS _ 60) -> cont 60#;
	PT _ (TS _ 61) -> cont 61#;
	PT _ (TS _ 62) -> cont 62#;
	PT _ (TS _ 63) -> cont 63#;
	PT _ (TS _ 64) -> cont 64#;
	PT _ (TS _ 65) -> cont 65#;
	PT _ (TS _ 66) -> cont 66#;
	PT _ (TS _ 67) -> cont 67#;
	PT _ (TS _ 68) -> cont 68#;
	PT _ (TS _ 69) -> cont 69#;
	PT _ (TS _ 70) -> cont 70#;
	PT _ (TS _ 71) -> cont 71#;
	PT _ (TS _ 72) -> cont 72#;
	PT _ (TS _ 73) -> cont 73#;
	PT _ (TS _ 74) -> cont 74#;
	PT _ (TS _ 75) -> cont 75#;
	PT _ (TS _ 76) -> cont 76#;
	PT _ (TS _ 77) -> cont 77#;
	PT _ (TS _ 78) -> cont 78#;
	PT _ (TS _ 79) -> cont 79#;
	PT _ (TS _ 80) -> cont 80#;
	PT _ (TS _ 81) -> cont 81#;
	PT _ (TS _ 82) -> cont 82#;
	PT _ (TS _ 83) -> cont 83#;
	PT _ (TS _ 84) -> cont 84#;
	PT _ (TS _ 85) -> cont 85#;
	PT _ (TS _ 86) -> cont 86#;
	PT _ (TS _ 87) -> cont 87#;
	PT _ (TS _ 88) -> cont 88#;
	PT _ (TS _ 89) -> cont 89#;
	PT _ (TS _ 90) -> cont 90#;
	PT _ (TS _ 91) -> cont 91#;
	PT _ (TS _ 92) -> cont 92#;
	PT _ (TS _ 93) -> cont 93#;
	PT _ (TS _ 94) -> cont 94#;
	PT _ (TS _ 95) -> cont 95#;
	PT _ (TS _ 96) -> cont 96#;
	PT _ (TS _ 97) -> cont 97#;
	PT _ (TS _ 98) -> cont 98#;
	PT _ (TS _ 99) -> cont 99#;
	PT _ (TS _ 100) -> cont 100#;
	PT _ (TS _ 101) -> cont 101#;
	PT _ (TS _ 102) -> cont 102#;
	PT _ (TS _ 103) -> cont 103#;
	PT _ (TS _ 104) -> cont 104#;
	PT _ (TS _ 105) -> cont 105#;
	PT _ (TS _ 106) -> cont 106#;
	PT _ (TS _ 107) -> cont 107#;
	PT _ (TS _ 108) -> cont 108#;
	PT _ (TS _ 109) -> cont 109#;
	PT _ (TS _ 110) -> cont 110#;
	PT _ (TS _ 111) -> cont 111#;
	PT _ (TS _ 112) -> cont 112#;
	PT _ (TS _ 113) -> cont 113#;
	PT _ (TS _ 114) -> cont 114#;
	PT _ (TS _ 115) -> cont 115#;
	PT _ (TS _ 116) -> cont 116#;
	PT _ (TS _ 117) -> cont 117#;
	PT _ (TS _ 118) -> cont 118#;
	PT _ (TS _ 119) -> cont 119#;
	PT _ (TS _ 120) -> cont 120#;
	PT _ (TS _ 121) -> cont 121#;
	PT _ (TS _ 122) -> cont 122#;
	PT _ (TS _ 123) -> cont 123#;
	PT _ (TS _ 124) -> cont 124#;
	PT _ (TS _ 125) -> cont 125#;
	PT _ (TS _ 126) -> cont 126#;
	PT _ (TS _ 127) -> cont 127#;
	PT _ (TS _ 128) -> cont 128#;
	PT _ (TS _ 129) -> cont 129#;
	PT _ (TS _ 130) -> cont 130#;
	PT _ (TS _ 131) -> cont 131#;
	PT _ (TS _ 132) -> cont 132#;
	PT _ (TS _ 133) -> cont 133#;
	PT _ (TS _ 134) -> cont 134#;
	PT _ (TS _ 135) -> cont 135#;
	PT _ (TS _ 136) -> cont 136#;
	PT _ (TS _ 137) -> cont 137#;
	PT _ (TS _ 138) -> cont 138#;
	PT _ (TS _ 139) -> cont 139#;
	PT _ (TS _ 140) -> cont 140#;
	PT _ (TS _ 141) -> cont 141#;
	PT _ (T_Int happy_dollar_dollar) -> cont 142#;
	PT _ (T_Nat happy_dollar_dollar) -> cont 143#;
	PT _ (T_Str happy_dollar_dollar) -> cont 144#;
	PT _ (T_Hex happy_dollar_dollar) -> cont 145#;
	_ -> happyError' ((tk:tks), [])
	}

happyError_ explist 146# tk tks = happyError' (tks, explist)
happyError_ explist _ tk tks = happyError' ((tk:tks), explist)

happyThen :: () => Err a -> (a -> Err b) -> Err b
happyThen = ((>>=))
happyReturn :: () => a -> Err a
happyReturn = (return)
happyThen1 m k tks = ((>>=)) m (\a -> k a tks)
happyReturn1 :: () => a -> b -> Err a
happyReturn1 = \a tks -> (return) a
happyError' :: () => ([(Token)], [String]) -> Err a
happyError' = (\(tokens, _) -> happyError tokens)
pProg tks = happySomeParser where
 happySomeParser = happyThen (happyParse 0# tks) (\x -> happyReturn (let {(HappyWrap8 x') = happyOut8 x} in x'))

happySeq = happyDontSeq


type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens
{-# LINE 1 "templates/GenericTemplate.hs" #-}
{-# LINE 1 "templates/GenericTemplate.hs" #-}
{-# LINE 1 "<built-in>" #-}
{-# LINE 1 "<command-line>" #-}
{-# LINE 10 "<command-line>" #-}
# 1 "/usr/include/stdc-predef.h" 1 3 4

# 17 "/usr/include/stdc-predef.h" 3 4











































{-# LINE 10 "<command-line>" #-}
{-# LINE 1 "/usr/lib/ghc/include/ghcversion.h" #-}















{-# LINE 10 "<command-line>" #-}
{-# LINE 1 "/tmp/ghc8371_0/ghc_2.h" #-}
































































































































































































{-# LINE 10 "<command-line>" #-}
{-# LINE 1 "templates/GenericTemplate.hs" #-}
-- Id: GenericTemplate.hs,v 1.26 2005/01/14 14:47:22 simonmar Exp 













-- Do not remove this comment. Required to fix CPP parsing when using GCC and a clang-compiled alex.
#if __GLASGOW_HASKELL__ > 706
#define LT(n,m) ((Happy_GHC_Exts.tagToEnum# (n Happy_GHC_Exts.<# m)) :: Bool)
#define GTE(n,m) ((Happy_GHC_Exts.tagToEnum# (n Happy_GHC_Exts.>=# m)) :: Bool)
#define EQ(n,m) ((Happy_GHC_Exts.tagToEnum# (n Happy_GHC_Exts.==# m)) :: Bool)
#else
#define LT(n,m) (n Happy_GHC_Exts.<# m)
#define GTE(n,m) (n Happy_GHC_Exts.>=# m)
#define EQ(n,m) (n Happy_GHC_Exts.==# m)
#endif
{-# LINE 43 "templates/GenericTemplate.hs" #-}

data Happy_IntList = HappyCons Happy_GHC_Exts.Int# Happy_IntList







{-# LINE 65 "templates/GenericTemplate.hs" #-}

{-# LINE 75 "templates/GenericTemplate.hs" #-}

{-# LINE 84 "templates/GenericTemplate.hs" #-}

infixr 9 `HappyStk`
data HappyStk a = HappyStk a (HappyStk a)

-----------------------------------------------------------------------------
-- starting the parse

happyParse start_state = happyNewToken start_state notHappyAtAll notHappyAtAll

-----------------------------------------------------------------------------
-- Accepting the parse

-- If the current token is 0#, it means we've just accepted a partial
-- parse (a %partial parser).  We must ignore the saved token on the top of
-- the stack in this case.
happyAccept 0# tk st sts (_ `HappyStk` ans `HappyStk` _) =
        happyReturn1 ans
happyAccept j tk st sts (HappyStk ans _) = 
        (happyTcHack j (happyTcHack st)) (happyReturn1 ans)

-----------------------------------------------------------------------------
-- Arrays only: do the next action



happyDoAction i tk st
        = {- nothing -}


          case action of
                0#           -> {- nothing -}
                                     happyFail (happyExpListPerState ((Happy_GHC_Exts.I# (st)) :: Int)) i tk st
                -1#          -> {- nothing -}
                                     happyAccept i tk st
                n | LT(n,(0# :: Happy_GHC_Exts.Int#)) -> {- nothing -}

                                                   (happyReduceArr Happy_Data_Array.! rule) i tk st
                                                   where rule = (Happy_GHC_Exts.I# ((Happy_GHC_Exts.negateInt# ((n Happy_GHC_Exts.+# (1# :: Happy_GHC_Exts.Int#))))))
                n                 -> {- nothing -}


                                     happyShift new_state i tk st
                                     where new_state = (n Happy_GHC_Exts.-# (1# :: Happy_GHC_Exts.Int#))
   where off    = happyAdjustOffset (indexShortOffAddr happyActOffsets st)
         off_i  = (off Happy_GHC_Exts.+#  i)
         check  = if GTE(off_i,(0# :: Happy_GHC_Exts.Int#))
                  then EQ(indexShortOffAddr happyCheck off_i, i)
                  else False
         action
          | check     = indexShortOffAddr happyTable off_i
          | otherwise = indexShortOffAddr happyDefActions st




indexShortOffAddr (HappyA# arr) off =
        Happy_GHC_Exts.narrow16Int# i
  where
        i = Happy_GHC_Exts.word2Int# (Happy_GHC_Exts.or# (Happy_GHC_Exts.uncheckedShiftL# high 8#) low)
        high = Happy_GHC_Exts.int2Word# (Happy_GHC_Exts.ord# (Happy_GHC_Exts.indexCharOffAddr# arr (off' Happy_GHC_Exts.+# 1#)))
        low  = Happy_GHC_Exts.int2Word# (Happy_GHC_Exts.ord# (Happy_GHC_Exts.indexCharOffAddr# arr off'))
        off' = off Happy_GHC_Exts.*# 2#




{-# INLINE happyLt #-}
happyLt x y = LT(x,y)


readArrayBit arr bit =
    Bits.testBit (Happy_GHC_Exts.I# (indexShortOffAddr arr ((unbox_int bit) `Happy_GHC_Exts.iShiftRA#` 4#))) (bit `mod` 16)
  where unbox_int (Happy_GHC_Exts.I# x) = x






data HappyAddr = HappyA# Happy_GHC_Exts.Addr#


-----------------------------------------------------------------------------
-- HappyState data type (not arrays)

{-# LINE 180 "templates/GenericTemplate.hs" #-}

-----------------------------------------------------------------------------
-- Shifting a token

happyShift new_state 0# tk st sts stk@(x `HappyStk` _) =
     let i = (case Happy_GHC_Exts.unsafeCoerce# x of { (Happy_GHC_Exts.I# (i)) -> i }) in
--     trace "shifting the error token" $
     happyDoAction i tk new_state (HappyCons (st) (sts)) (stk)

happyShift new_state i tk st sts stk =
     happyNewToken new_state (HappyCons (st) (sts)) ((happyInTok (tk))`HappyStk`stk)

-- happyReduce is specialised for the common cases.

happySpecReduce_0 i fn 0# tk st sts stk
     = happyFail [] 0# tk st sts stk
happySpecReduce_0 nt fn j tk st@((action)) sts stk
     = happyGoto nt j tk st (HappyCons (st) (sts)) (fn `HappyStk` stk)

happySpecReduce_1 i fn 0# tk st sts stk
     = happyFail [] 0# tk st sts stk
happySpecReduce_1 nt fn j tk _ sts@((HappyCons (st@(action)) (_))) (v1`HappyStk`stk')
     = let r = fn v1 in
       happySeq r (happyGoto nt j tk st sts (r `HappyStk` stk'))

happySpecReduce_2 i fn 0# tk st sts stk
     = happyFail [] 0# tk st sts stk
happySpecReduce_2 nt fn j tk _ (HappyCons (_) (sts@((HappyCons (st@(action)) (_))))) (v1`HappyStk`v2`HappyStk`stk')
     = let r = fn v1 v2 in
       happySeq r (happyGoto nt j tk st sts (r `HappyStk` stk'))

happySpecReduce_3 i fn 0# tk st sts stk
     = happyFail [] 0# tk st sts stk
happySpecReduce_3 nt fn j tk _ (HappyCons (_) ((HappyCons (_) (sts@((HappyCons (st@(action)) (_))))))) (v1`HappyStk`v2`HappyStk`v3`HappyStk`stk')
     = let r = fn v1 v2 v3 in
       happySeq r (happyGoto nt j tk st sts (r `HappyStk` stk'))

happyReduce k i fn 0# tk st sts stk
     = happyFail [] 0# tk st sts stk
happyReduce k nt fn j tk st sts stk
     = case happyDrop (k Happy_GHC_Exts.-# (1# :: Happy_GHC_Exts.Int#)) sts of
         sts1@((HappyCons (st1@(action)) (_))) ->
                let r = fn stk in  -- it doesn't hurt to always seq here...
                happyDoSeq r (happyGoto nt j tk st1 sts1 r)

happyMonadReduce k nt fn 0# tk st sts stk
     = happyFail [] 0# tk st sts stk
happyMonadReduce k nt fn j tk st sts stk =
      case happyDrop k (HappyCons (st) (sts)) of
        sts1@((HappyCons (st1@(action)) (_))) ->
          let drop_stk = happyDropStk k stk in
          happyThen1 (fn stk tk) (\r -> happyGoto nt j tk st1 sts1 (r `HappyStk` drop_stk))

happyMonad2Reduce k nt fn 0# tk st sts stk
     = happyFail [] 0# tk st sts stk
happyMonad2Reduce k nt fn j tk st sts stk =
      case happyDrop k (HappyCons (st) (sts)) of
        sts1@((HappyCons (st1@(action)) (_))) ->
         let drop_stk = happyDropStk k stk

             off = happyAdjustOffset (indexShortOffAddr happyGotoOffsets st1)
             off_i = (off Happy_GHC_Exts.+#  nt)
             new_state = indexShortOffAddr happyTable off_i




          in
          happyThen1 (fn stk tk) (\r -> happyNewToken new_state sts1 (r `HappyStk` drop_stk))

happyDrop 0# l = l
happyDrop n (HappyCons (_) (t)) = happyDrop (n Happy_GHC_Exts.-# (1# :: Happy_GHC_Exts.Int#)) t

happyDropStk 0# l = l
happyDropStk n (x `HappyStk` xs) = happyDropStk (n Happy_GHC_Exts.-# (1#::Happy_GHC_Exts.Int#)) xs

-----------------------------------------------------------------------------
-- Moving to a new state after a reduction


happyGoto nt j tk st = 
   {- nothing -}
   happyDoAction j tk new_state
   where off = happyAdjustOffset (indexShortOffAddr happyGotoOffsets st)
         off_i = (off Happy_GHC_Exts.+#  nt)
         new_state = indexShortOffAddr happyTable off_i




-----------------------------------------------------------------------------
-- Error recovery (0# is the error token)

-- parse error if we are in recovery and we fail again
happyFail explist 0# tk old_st _ stk@(x `HappyStk` _) =
     let i = (case Happy_GHC_Exts.unsafeCoerce# x of { (Happy_GHC_Exts.I# (i)) -> i }) in
--      trace "failing" $ 
        happyError_ explist i tk

{-  We don't need state discarding for our restricted implementation of
    "error".  In fact, it can cause some bogus parses, so I've disabled it
    for now --SDM

-- discard a state
happyFail  0# tk old_st (HappyCons ((action)) (sts)) 
                                                (saved_tok `HappyStk` _ `HappyStk` stk) =
--      trace ("discarding state, depth " ++ show (length stk))  $
        happyDoAction 0# tk action sts ((saved_tok`HappyStk`stk))
-}

-- Enter error recovery: generate an error token,
--                       save the old token and carry on.
happyFail explist i tk (action) sts stk =
--      trace "entering error recovery" $
        happyDoAction 0# tk action sts ( (Happy_GHC_Exts.unsafeCoerce# (Happy_GHC_Exts.I# (i))) `HappyStk` stk)

-- Internal happy errors:

notHappyAtAll :: a
notHappyAtAll = error "Internal Happy error\n"

-----------------------------------------------------------------------------
-- Hack to get the typechecker to accept our action functions


happyTcHack :: Happy_GHC_Exts.Int# -> a -> a
happyTcHack x y = y
{-# INLINE happyTcHack #-}


-----------------------------------------------------------------------------
-- Seq-ing.  If the --strict flag is given, then Happy emits 
--      happySeq = happyDoSeq
-- otherwise it emits
--      happySeq = happyDontSeq

happyDoSeq, happyDontSeq :: a -> b -> b
happyDoSeq   a b = a `seq` b
happyDontSeq a b = b

-----------------------------------------------------------------------------
-- Don't inline any functions from the template.  GHC has a nasty habit
-- of deciding to inline happyGoto everywhere, which increases the size of
-- the generated parser quite a bit.


{-# NOINLINE happyDoAction #-}
{-# NOINLINE happyTable #-}
{-# NOINLINE happyCheck #-}
{-# NOINLINE happyActOffsets #-}
{-# NOINLINE happyGotoOffsets #-}
{-# NOINLINE happyDefActions #-}

{-# NOINLINE happyShift #-}
{-# NOINLINE happySpecReduce_0 #-}
{-# NOINLINE happySpecReduce_1 #-}
{-# NOINLINE happySpecReduce_2 #-}
{-# NOINLINE happySpecReduce_3 #-}
{-# NOINLINE happyReduce #-}
{-# NOINLINE happyMonadReduce #-}
{-# NOINLINE happyGoto #-}
{-# NOINLINE happyFail #-}

-- end of Happy Template.
