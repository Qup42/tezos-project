-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language michelson.

module Michelson.Abs where

import Prelude (String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Prog = Code Instr [Instr]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data PairSeq = DPairSeq1 Data Data | DPairSeq2 Data PairSeq
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data MapSeq = DMapSeq1 Data Data | DMapSeq2 Data Data MapSeq
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Data
    = DInt Int
    | DStr Str
    | DByte Hex
    | DUnit
    | DTrue
    | DFalse
    | DPair2 PairSeq
    | DLeft Data
    | DRight Data
    | DSome Data
    | DNone
    | DBlock [Data]
    | DMap MapSeq
    | DInstr Instr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Instr
    = IBLOCK [Instr]
    | IDROP
    | IDROP_N Nat
    | IDUP
    | IDUP_N Nat
    | ISWAP
    | IDIG_N Nat
    | IDUG_N Nat
    | IPUSH Typ Data
    | ISOME
    | INONE Typ
    | IUNIT
    | INEVER
    | IIF_NONE [Instr] [Instr]
    | IPAIR
    | IPAIR_N Nat
    | ICAR
    | ICDR
    | IUNPAIR
    | IUNPAIR_N Nat
    | ILEFT Typ
    | IRIGHT Typ
    | IIF_LEFT [Instr] [Instr]
    | INIL Typ
    | ICONS
    | IIF_CONS [Instr] [Instr]
    | ISIZE
    | IEMPTY_SET CTyp
    | IEMPTY_MAP CTyp Typ
    | IEMPTY_BIG_MAP CTyp Typ
    | IMAP [Instr]
    | IITER [Instr]
    | IMEM
    | IGET
    | IGET_N Nat
    | IUPDATE
    | IUPDATE_N Nat
    | IIF [Instr] [Instr]
    | ILOOP [Instr]
    | ILOOP_LEFT [Instr]
    | ILAMBDA Typ Typ [Instr]
    | IEXEC
    | IAPPLY
    | IDIP [Instr]
    | IDIP_N Nat [Instr]
    | IFAILWITH
    | ICAST
    | IRENAME
    | ICONCAT
    | ISLICE
    | IPACK
    | IUNPACK Typ
    | IADD
    | ISUB
    | IMUL
    | IEDIC
    | IABS
    | ISNAT
    | IINT
    | INEG
    | ILSL
    | ILSR
    | IOR
    | IAND
    | IXOR
    | INOT
    | ICOMPARE
    | IEQ
    | INEQ
    | ILT
    | IGT
    | ILE
    | IGE
    | ISELF
    | ISELF_ADDRESS
    | ICONTRACT Typ
    | ITRANSFER_TOKENS
    | ISET_DELEGATE
    | ICREATE_CONTRACT [Instr]
    | IIMPLICIT_ACCOUNT
    | IVOTING_POWER
    | INOW
    | ILEVEL
    | IAMOUNT
    | IBALANCE
    | ICHECK_SIGNATURE
    | IBLAKE2B
    | IKECCAK
    | ISHA3
    | ISHA256
    | ISHA512
    | IHASH_KEY
    | ISOURCE
    | ISENDER
    | IADDRESS
    | ICHAIN_ID
    | ITOTAL_VOTING_POWER
    | IPAIRING_CHECK
    | ISAPLING_EMPTY_STATE Nat
    | ISAPLING_VERIFY_UPDATE
    | ITICKET
    | IREAD_TICKET
    | ISPLIT_TICKET
    | IJOIN_TICKETS
    | IOPEN_CHEST
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TypeSeq = TTypSeq1 Typ Typ | TTypSeq2 Typ TypeSeq
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Typ
    = TCtype CTyp
    | TOption Typ
    | TList Typ
    | TSet CTyp
    | TOperation
    | TContract Typ
    | TTicket CTyp
    | TPair TypeSeq
    | TOr Typ Typ
    | TLambda Typ Typ
    | TMap CTyp Typ
    | TBig_map CTyp Typ
    | TBls_g1
    | TBls_g2
    | TBls_fr
    | TSapling_transaction Nat
    | TSapling_state Nat
    | TChest
    | TChest_key
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data CTypeSeq = CTypSeq1 CTyp CTyp | CTypSeq2 CTyp CTypeSeq
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data CTyp
    = CUnit
    | CNever
    | CBool
    | CInt
    | CNat
    | CString
    | CChain_id
    | CBytes
    | CMutez
    | CKey_hash
    | CKey
    | CSignature
    | CTimestamp
    | CAddress
    | COption CTyp
    | COr CTyp CTyp
    | CPair CTypeSeq
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Int = Int String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype Nat = Nat String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype Str = Str String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype Hex = Hex String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

