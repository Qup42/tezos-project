-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.11 from Test/Par.y
-----------------------------------------------------------------------------

state 15 contains 1 reduce/reduce conflicts.

rule 1 is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProg -> Prog                               (0)
	Nat -> L_Nat                                       (1)
	Int -> L_Int                                       (2)
	Prog -> Instr ';' ListInstr                        (3)
	ListInstr ->                                       (4)
	ListInstr -> Instr                                 (5)
	ListInstr -> Instr ';' ListInstr                   (6)
	Instr -> Instr ';'                                 (7)
	Instr -> 'PUSH' CType Data                         (8)
	Instr -> 'DROP'                                    (9)
	Data -> Int                                        (10)
	CType -> 'int'                                     (11)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	';'            { PT _ (TS _ 1) }
	'DROP'         { PT _ (TS _ 2) }
	'PUSH'         { PT _ (TS _ 3) }
	'int'          { PT _ (TS _ 4) }
	L_Nat          { PT _ (T_Nat $$) }
	L_Int          { PT _ (T_Int $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProg    rule  0
	Nat             rule  1
	Int             rule  2
	Prog            rule  3
	ListInstr       rules 4, 5, 6
	Instr           rules 7, 8, 9
	Data            rule  10
	CType           rule  11

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'DROP'         shift, and enter state 5
	'PUSH'         shift, and enter state 6

	Prog           goto state 3
	Instr          goto state 4

State 1


	L_Nat          shift, and enter state 2


State 2

	Nat -> L_Nat .                                      (rule 1)



State 3

	%start_pProg -> Prog .                              (rule 0)

	%eof           accept


State 4

	Prog -> Instr . ';' ListInstr                       (rule 3)
	Instr -> Instr . ';'                                (rule 7)

	';'            shift, and enter state 9


State 5

	Instr -> 'DROP' .                                   (rule 9)

	';'            reduce using rule 9
	%eof           reduce using rule 9


State 6

	Instr -> 'PUSH' . CType Data                        (rule 8)

	'int'          shift, and enter state 8

	CType          goto state 7

State 7

	Instr -> 'PUSH' CType . Data                        (rule 8)

	L_Int          shift, and enter state 14

	Int            goto state 12
	Data           goto state 13

State 8

	CType -> 'int' .                                    (rule 11)

	L_Int          reduce using rule 11


State 9

	Prog -> Instr ';' . ListInstr                       (rule 3)
	Instr -> Instr ';' .                                (rule 7)

	';'            reduce using rule 7
	'DROP'         shift, and enter state 5
	'PUSH'         shift, and enter state 6
	%eof           reduce using rule 4

	ListInstr      goto state 10
	Instr          goto state 11

State 10

	Prog -> Instr ';' ListInstr .                       (rule 3)

	%eof           reduce using rule 3


State 11

	ListInstr -> Instr .                                (rule 5)
	ListInstr -> Instr . ';' ListInstr                  (rule 6)
	Instr -> Instr . ';'                                (rule 7)

	';'            shift, and enter state 15
	%eof           reduce using rule 5


State 12

	Data -> Int .                                       (rule 10)

	';'            reduce using rule 10
	%eof           reduce using rule 10


State 13

	Instr -> 'PUSH' CType Data .                        (rule 8)

	';'            reduce using rule 8
	%eof           reduce using rule 8


State 14

	Int -> L_Int .                                      (rule 2)

	';'            reduce using rule 2
	%eof           reduce using rule 2


State 15

	ListInstr -> Instr ';' . ListInstr                  (rule 6)
	Instr -> Instr ';' .                                (rule 7)

	';'            reduce using rule 7
	'DROP'         shift, and enter state 5
	'PUSH'         shift, and enter state 6
	%eof           reduce using rule 7
			(reduce using rule 4)


	ListInstr      goto state 16
	Instr          goto state 11

State 16

	ListInstr -> Instr ';' ListInstr .                  (rule 6)

	%eof           reduce using rule 6


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 12
Number of terminals: 6
Number of non-terminals: 8
Number of states: 17
