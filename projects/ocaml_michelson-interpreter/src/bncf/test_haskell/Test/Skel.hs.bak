-- Haskell module generated by the BNF converter

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Test.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Test.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transInt :: Test.Abs.Int -> Result
transInt x = case x of
  Test.Abs.Int string -> failure x

transNat :: Test.Abs.Nat -> Result
transNat x = case x of
  Test.Abs.Nat string -> failure x

transProg :: Test.Abs.Prog -> Result
transProg x = case x of
  Test.Abs.Code instr instrs -> failure x

transInstr :: Test.Abs.Instr -> Result
transInstr x = case x of
  Test.Abs.IPUSH ctype data_ -> failure x
  Test.Abs.IADD -> failure x

transData :: Test.Abs.Data -> Result
transData x = case x of
  Test.Abs.DInt int -> failure x

transCType :: Test.Abs.CType -> Result
transCType x = case x of
  Test.Abs.CInt -> failure x
