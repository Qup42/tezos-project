-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language test.

module Test.Abs where

import Prelude (String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Prog = Code Instr [Instr]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Instr = IPUSH CType Data | IADD
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Data = DInt Int
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data CType = CInt
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Nat = Nat String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype Int = Int String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

