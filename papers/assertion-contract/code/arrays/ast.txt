AST                  
└──Entrypoint: %array
  └──Pattern: Id:a
    └──Type: List_t<Type: Int_t>
└──Assertion: Forall
  └──Pattern: Id:n
    └──Type: Int_t
  └──Assertion: Forall
    └──Pattern: Id:m
      └──Type: Int_t
    └──Assertion: If
      └──Expr: Bin Op: And
        └──Expr: Bin Op: Ge
          └──Expr: Id:n
          └──Expr: Int:1
        └──Expr: Bin Op: Le
          └──Expr: Id:n
          └──Expr: Un Op: Size
            └──Expr: Id:a
      └──Assertion: If
        └──Expr: Bin Op: And
          └──Expr: Bin Op: Ge
            └──Expr: Id:m
            └──Expr: Int:0
          └──Expr: Bin Op: Lt
            └──Expr: Id:m
            └──Expr: Id:n
        └──Assertion: Assert
          └──Expr: Bin Op: Le
            └──Expr: Bin Op: Nth
              └──Expr: Id:a
              └──Expr: Id:n
            └──Expr: Bin Op: Nth
              └──Expr: Id:a
              └──Expr: Id:m
AST
└──Entrypoint: %array
  └──Pattern: Id:a
    └──Type: List_t<Type: Int_t>
└──Assertion: Exists
  └──Pattern: Id:n
    └──Type: Int_t
  └──Bounds: 
    └──Expr: Bin Op: Ge
      └──Expr: Id:n
      └──Expr: Int:1
    └──Expr: Bin Op: Le
      └──Expr: Id:n
      └──Expr: Un Op: Size
        └──Expr: Id:a
  └──Assertion: Exists
    └──Pattern: Id:m
      └──Type: Int_t
    └──Bounds: 
      └──Expr: Bin Op: And
        └──Expr: Bin Op: Ge
          └──Expr: Id:m
          └──Expr: Int:0
        └──Expr: Bin Op: Lt
          └──Expr: Id:m
          └──Expr: Id:n
    └──Assertion: Assert
      └──Expr: Bin Op: Gt
        └──Expr: Bin Op: Nth
          └──Expr: Id:a
          └──Expr: Id:n
        └──Expr: Bin Op: Nth
          └──Expr: Id:a
          └──Expr: Id:m

{"entrypoint":[["Some","array"],["Ident",["a",["List_t","Int_t"]]]],"body":["Forall",[["n","Int_t"],["Forall",[["m","Int_t"],["If",[["Binop",["And",["Binop",["Ge",["Ident","n"],["Int",1]]],["Binop",["Le",["Ident","n"],["Unop",["Size",["Ident","a"]]]]]]],["If",[["Binop",["And",["Binop",["Ge",["Ident","m"],["Int",0]]],["Binop",["Lt",["Ident","m"],["Ident","n"]]]]],["Assert",["Binop",["Le",["Binop",["Nth",["Ident","a"],["Ident","n"]]],["Binop",["Nth",["Ident","a"],["Ident","m"]]]]]]]]]]]]]]}

